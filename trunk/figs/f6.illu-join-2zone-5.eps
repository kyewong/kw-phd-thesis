%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 5.pdf
%%Creator: Adobe Acrobat 9.3.2
%%For: wang0452
%%CreationDate: 2012-7-25, 14:10:41
%%BoundingBox: 0 0 910 372
%%HiResBoundingBox: 0 0 910.5000 371.2500
%%CropBox: 0 0 910.5000 371.2500
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 954 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2012-07-25T14:08:57Z"
   xmp:CreatorTool="Microsoft® Office Visio® 2007"
   xmp:ModifyDate="2012-07-25T14:08:57Z"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Office Visio® 2007">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>WANG KAI</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -371.25 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 371.25 li
910.5 371.25 li
910.5 0 li
cp
clp
[1 0 0 1 0 0 ]ct
837.209 368.624 mo
611.759 368.624 li
667.249 313.131 li
695.33 313.131 li
695.33 343.712 li
695.33 343.712 li
695.33 343.712 li
695.33 343.714 695.33 343.717 695.33 343.719 cv
695.33 343.72 695.33 343.721 695.33 343.721 cv
695.33 343.723 695.33 343.725 695.33 343.727 cv
695.33 343.728 695.33 343.729 695.33 343.731 cv
695.33 343.732 695.331 343.734 695.331 343.735 cv
695.331 343.737 695.331 343.738 695.331 343.739 cv
695.331 343.74 695.331 343.741 695.331 343.741 cv
695.343 343.884 695.438 344.006 695.571 344.052 cv
695.572 344.052 695.573 344.053 695.574 344.053 cv
695.575 344.053 695.575 344.053 695.576 344.054 cv
695.578 344.054 695.58 344.055 695.582 344.056 cv
695.582 344.056 695.583 344.056 695.583 344.056 cv
695.604 344.062 695.625 344.067 695.646 344.069 cv
735.312 349.736 li
735.331 349.739 735.35 349.741 735.37 349.741 cv
735.376 349.741 735.382 349.741 735.388 349.74 cv
792.088 346.906 li
792.143 346.904 792.195 346.889 792.24 346.864 cv
809.231 338.365 li
809.35 338.306 809.424 338.187 809.43 338.059 cv
809.43 338.058 809.43 338.057 809.43 338.057 cv
809.43 338.056 809.43 338.055 809.43 338.054 cv
809.43 338.05 809.43 338.047 809.43 338.043 cv
809.43 313.131 li
906.579 313.131 li
837.209 368.624 li
610.205 368.624 mo
222.216 368.624 li
291.576 313.131 li
602.638 313.131 li
610.205 368.624 li
220.767 368.624 mo
2.91051 368.624 li
72.2764 313.131 li
105.614 313.131 li
71.8484 340.719 li
71.8131 340.746 71.783 340.779 71.7596 340.817 cv
71.7085 340.899 71.6926 341 71.7173 341.096 cv
71.7175 341.097 71.7178 341.098 71.718 341.099 cv
71.7181 341.099 71.7183 341.1 71.7185 341.1 cv
71.7327 341.153 71.7586 341.201 71.7944 341.242 cv
71.7948 341.243 71.7952 341.243 71.7955 341.244 cv
71.7962 341.245 71.7968 341.245 71.7975 341.246 cv
71.7985 341.247 71.7994 341.248 71.8004 341.249 cv
71.8007 341.25 71.801 341.25 71.8014 341.25 cv
71.8027 341.252 71.804 341.253 71.8054 341.255 cv
71.8055 341.255 71.8056 341.255 71.8057 341.255 cv
71.8375 341.288 71.8753 341.315 71.9167 341.334 cv
83.6054 346.996 li
83.6528 347.021 83.7062 347.035 83.7621 347.036 cv
142.276 348.324 li
142.28 348.324 142.285 348.324 142.289 348.324 cv
142.297 348.324 142.306 348.324 142.314 348.323 cv
200.834 344.458 li
201.039 344.377 li
239.034 313.131 li
245.991 313.131 li
220.767 368.624 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.142367 .107179 .107179 0 cmyk
f
72.0661 312.531 mo
72.4408 312.999 li
2.91051 368.624 li
837.209 368.624 li
906.579 313.131 li
72.0661 313.131 li
72.0661 312.531 li
72.4408 312.999 li
72.0661 312.531 li
72.0661 311.931 li
908.29 311.931 li
908.545 311.931 908.771 312.091 908.856 312.332 cv
908.94 312.573 908.864 312.84 908.665 312.999 cv
837.795 369.692 li
837.688 369.777 837.556 369.824 837.42 369.824 cv
1.19984 369.824 li
.944534 369.824 .718356 369.664 .633709 369.423 cv
.549291 369.181 .625745 368.915 .825074 368.755 cv
71.6911 312.062 li
71.7973 311.977 71.9298 311.931 72.0661 311.931 cv
72.0661 312.531 li
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
156.92 333.791 mo
98.4011 336.368 li
72.0661 341.006 li
83.77 346.676 li
142.29 347.964 li
200.81 344.099 li
208.13 337.656 li
156.92 333.791 li
.905547 .71957 0 0 cmyk
ef
156.92 333.791 mo
156.936 334.151 li
98.4402 336.727 li
73.225 341.167 li
83.8563 346.318 li
142.282 347.604 li
200.664 343.748 li
207.25 337.951 li
156.893 334.15 li
156.92 333.791 li
156.936 334.151 li
156.92 333.791 li
156.947 333.432 li
208.157 337.297 li
208.301 337.308 208.426 337.405 208.471 337.542 cv
208.517 337.679 208.476 337.831 208.368 337.926 cv
201.048 344.369 li
200.834 344.458 li
142.314 348.323 li
142.282 348.324 li
83.7621 347.036 li
83.613 347 li
71.9091 341.33 li
71.7682 341.262 71.6879 341.111 71.7095 340.956 cv
71.7311 340.801 71.8495 340.679 72.0035 340.651 cv
98.3385 336.013 li
98.3852 336.008 li
156.904 333.431 li
156.947 333.432 li
156.92 333.791 li
1 /0 /CSD get_res sepcs
1 sep
f
763.72 332.374 mo
712.7 336.626 li
695.69 343.712 li
735.37 349.381 li
792.07 346.547 li
809.07 338.043 li
763.72 332.374 li
0 .9617 .904814 0 cmyk
ef
763.72 332.374 mo
763.75 332.733 li
712.786 336.98 li
697.037 343.541 li
735.386 349.02 li
791.976 346.191 li
807.846 338.253 li
763.675 332.731 li
763.72 332.374 li
763.75 332.733 li
763.72 332.374 li
763.765 332.017 li
809.115 337.686 li
809.272 337.705 809.398 337.826 809.425 337.982 cv
809.452 338.139 809.373 338.294 809.231 338.365 cv
792.231 346.869 li
792.088 346.906 li
735.388 349.74 li
735.319 349.737 li
695.639 344.068 li
695.479 344.046 695.353 343.918 695.333 343.757 cv
695.312 343.597 695.402 343.442 695.552 343.38 cv
712.562 336.294 li
712.67 336.267 li
763.69 332.015 li
763.765 332.017 li
763.72 332.374 li
1 /0 /CSD get_res sepcs
1 sep
f
763.72 213.32 mo
763.765 212.963 li
809.115 218.633 li
809.295 218.655 809.43 218.809 809.43 218.99 cv
809.43 338.043 li
809.43 338.146 809.385 338.245 809.308 338.313 cv
809.231 338.381 809.127 338.413 809.025 338.4 cv
763.675 332.731 li
763.495 332.709 763.36 332.555 763.36 332.374 cv
763.36 213.32 li
763.36 213.217 763.404 213.118 763.482 213.05 cv
763.559 212.982 763.662 212.95 763.765 212.963 cv
763.72 213.32 li
764.08 213.32 li
764.08 332.056 li
808.71 337.635 li
808.71 219.308 li
763.675 213.677 li
763.72 213.32 li
764.08 213.32 li
763.72 213.32 li
f
763.72 213.32 mo
763.75 213.679 li
713.06 217.901 li
713.06 336.235 li
763.36 332.043 li
763.36 213.32 li
763.72 213.32 li
763.75 213.679 li
763.72 213.32 li
764.08 213.32 li
764.08 332.374 li
764.08 332.561 763.936 332.717 763.75 332.733 cv
712.73 336.985 li
712.63 336.993 712.53 336.959 712.456 336.891 cv
712.383 336.823 712.34 336.726 712.34 336.626 cv
712.34 217.57 li
712.34 217.383 712.484 217.227 712.67 217.211 cv
763.69 212.961 li
763.79 212.953 763.89 212.987 763.964 213.055 cv
764.037 213.123 764.08 213.22 764.08 213.32 cv
763.72 213.32 li
f
712.7 217.57 mo
712.839 217.902 li
696.05 224.9 li
696.05 343.172 li
712.34 336.386 li
712.34 217.57 li
712.7 217.57 li
712.839 217.902 li
712.7 217.57 li
713.06 217.57 li
713.06 336.626 li
713.06 336.772 712.973 336.902 712.839 336.958 cv
695.828 344.044 li
695.717 344.091 695.59 344.078 695.49 344.012 cv
695.39 343.945 695.33 343.832 695.33 343.712 cv
695.33 224.66 li
695.33 224.514 695.417 224.384 695.552 224.328 cv
712.561 217.238 li
712.673 217.191 712.8 217.204 712.9 217.27 cv
713 217.337 713.06 217.45 713.06 217.57 cv
712.7 217.57 li
f
765.019 228.484 mo
766.074 224.654 li
766.079 224.638 766.083 224.621 766.086 224.604 cv
766.086 224.604 li
767.682 214.178 li
807.846 219.2 li
791.976 227.134 li
765.019 228.484 li
0 .750423 .481209 0 cmyk
f
807.846 219.2 mo
767.682 214.178 li
807.846 219.2 li
.505852 1 1 .335546 cmyk
f
763.72 213.32 mo
763.75 213.679 li
712.786 217.924 li
697.036 224.489 li
735.386 229.969 li
791.976 227.134 li
807.846 219.2 li
763.675 213.677 li
763.72 213.32 li
763.75 213.679 li
763.72 213.32 li
763.765 212.963 li
809.115 218.633 li
809.272 218.653 809.398 218.773 809.425 218.929 cv
809.452 219.086 809.373 219.241 809.231 219.312 cv
792.231 227.812 li
792.088 227.85 li
735.388 230.69 li
735.319 230.686 li
695.639 225.016 li
695.479 224.993 695.353 224.866 695.333 224.705 cv
695.312 224.545 695.402 224.39 695.552 224.328 cv
712.561 217.238 li
712.67 217.211 li
763.69 212.961 li
763.765 212.963 li
763.72 213.32 li
1 /0 /CSD get_res sepcs
1 sep
f
735.01 348.966 mo
703.582 344.476 li
697.037 343.541 li
702.081 341.44 li
712.786 336.98 li
735.01 335.128 li
735.01 348.966 li
0 .9617 .904814 0 cmyk
f
735.01 348.966 mo
703.582 344.476 li
735.01 348.966 li
735.01 348.966 li
702.081 341.44 mo
712.786 336.98 li
735.01 335.128 li
735.01 335.128 li
712.786 336.98 li
702.081 341.44 li
.593988 .999268 1 .557153 cmyk
f
735.01 311.931 mo
713.06 311.931 li
713.06 301.966 li
726.36 305.003 li
726.36 305.003 li
726.386 305.009 726.413 305.012 726.44 305.012 cv
726.499 305.012 726.559 304.997 726.612 304.968 cv
735.01 300.387 li
735.01 311.931 li
0 .638209 .362097 0 cmyk
f
713.06 336.235 mo
713.06 313.131 li
735.01 313.131 li
735.01 334.405 li
713.06 336.235 li
0 .69897 .437079 0 cmyk
f
735.01 313.131 mo
713.06 313.131 li
713.06 311.931 li
735.01 311.931 li
735.01 313.131 li
.48072 1 1 .248569 cmyk
f
712.786 336.98 mo
712.839 336.958 li
712.973 336.902 713.06 336.772 713.06 336.626 cv
713.06 336.235 li
735.01 334.405 li
735.01 335.128 li
712.786 336.98 li
.593988 .999268 1 .557153 cmyk
f
712.34 311.931 mo
696.05 311.931 li
696.05 298.082 li
712.34 301.801 li
712.34 311.931 li
0 .638209 .362097 0 cmyk
f
696.05 343.172 mo
696.05 313.131 li
712.34 313.131 li
712.34 336.386 li
708.01 338.19 li
696.05 343.172 li
0 .69897 .437079 0 cmyk
f
712.34 313.131 mo
696.05 313.131 li
696.05 311.931 li
712.34 311.931 li
712.34 313.131 li
.48072 1 1 .248569 cmyk
f
708.01 338.19 mo
712.34 336.386 li
712.34 336.386 li
708.01 338.19 li
f
697.037 343.541 mo
696.05 343.4 li
696.05 343.172 li
708.01 338.19 li
712.34 336.386 li
712.34 301.801 li
713.06 301.966 li
713.06 311.931 li
713.06 313.131 li
713.06 336.235 li
713.06 336.626 li
713.06 336.772 712.973 336.902 712.839 336.958 cv
712.786 336.98 li
702.081 341.44 li
697.037 343.541 li
.593988 .999268 1 .557153 cmyk
f
695.69 224.66 mo
695.741 224.304 li
735.421 229.974 li
735.598 229.999 735.73 230.151 735.73 230.33 cv
735.73 349.381 li
735.73 349.485 735.685 349.585 735.606 349.653 cv
735.527 349.721 735.422 349.752 735.319 349.737 cv
695.639 344.068 li
695.461 344.043 695.33 343.891 695.33 343.712 cv
695.33 224.66 li
695.33 224.556 695.375 224.456 695.454 224.388 cv
695.533 224.32 695.638 224.289 695.741 224.304 cv
695.69 224.66 li
696.05 224.66 li
696.05 343.4 li
735.01 348.966 li
735.01 230.642 li
695.639 225.016 li
695.69 224.66 li
696.05 224.66 li
695.69 224.66 li
1 /0 /CSD get_res sepcs
1 sep
f
735.73 349.003 mo
735.73 335.068 li
763.713 332.736 li
791.71 336.236 li
791.71 346.204 li
760.564 347.761 li
735.73 349.002 li
0 .9617 .904814 0 cmyk
f
735.73 349.003 mo
735.73 349.003 li
760.564 347.761 li
735.73 349.003 li
791.71 336.236 mo
763.713 332.736 li
735.73 335.068 li
735.73 335.068 li
763.713 332.736 li
791.71 336.236 li
.593988 .999268 1 .557153 cmyk
f
791.71 311.931 mo
764.08 311.931 li
764.08 231.891 li
764.817 229.216 li
791.71 227.869 li
791.71 311.931 li
0 .638209 .362097 0 cmyk
f
791.71 335.51 mo
764.08 332.056 li
764.08 313.131 li
791.71 313.131 li
791.71 335.51 li
0 .69897 .437079 0 cmyk
f
791.71 313.131 mo
764.08 313.131 li
764.08 311.931 li
791.71 311.931 li
791.71 313.131 li
.48072 1 1 .248569 cmyk
f
791.71 335.51 mo
764.08 332.056 li
764.08 332.056 li
791.71 335.51 li
791.71 335.51 li
f
791.71 336.236 mo
763.713 332.736 li
763.75 332.733 li
763.936 332.717 764.08 332.561 764.08 332.374 cv
764.08 332.056 li
791.71 335.51 li
791.71 336.236 li
.593988 .999268 1 .557153 cmyk
f
763.36 311.931 mo
735.73 311.931 li
735.73 299.994 li
746.872 293.915 li
746.872 293.915 li
746.875 293.914 746.877 293.912 746.88 293.911 cv
746.88 293.91 746.881 293.91 746.881 293.91 cv
746.883 293.909 746.886 293.907 746.888 293.906 cv
746.888 293.906 746.888 293.906 746.889 293.906 cv
746.97 293.855 747.027 293.776 747.049 293.686 cv
763.36 234.504 li
763.36 311.931 li
0 .638209 .362097 0 cmyk
f
735.73 334.345 mo
735.73 313.131 li
763.36 313.131 li
763.36 332.043 li
751.249 333.052 li
735.73 334.345 li
0 .69897 .437079 0 cmyk
f
763.36 313.131 mo
735.73 313.131 li
735.73 311.931 li
763.36 311.931 li
763.36 313.131 li
.48072 1 1 .248569 cmyk
f
735.73 335.068 mo
735.73 334.345 li
751.249 333.052 li
763.36 332.043 li
763.36 234.504 li
764.08 231.891 li
764.08 311.931 li
764.08 313.131 li
764.08 332.056 li
764.08 332.056 li
764.08 332.374 li
764.08 332.561 763.936 332.717 763.75 332.733 cv
763.713 332.736 li
735.73 335.068 li
.593988 .999268 1 .557153 cmyk
f
764.817 229.216 mo
764.817 229.215 li
791.71 227.868 li
764.817 229.216 li
f
735.37 230.33 mo
735.352 229.971 li
792.052 227.13 li
792.151 227.126 792.246 227.161 792.318 227.229 cv
792.39 227.297 792.43 227.391 792.43 227.49 cv
792.43 346.547 li
792.43 346.739 792.28 346.897 792.088 346.906 cv
735.388 349.74 li
735.289 349.745 735.194 349.71 735.122 349.642 cv
735.05 349.574 735.01 349.48 735.01 349.381 cv
735.01 230.33 li
735.01 230.138 735.16 229.98 735.352 229.971 cv
735.37 230.33 li
735.73 230.33 li
735.73 349.003 li
791.71 346.204 li
791.71 227.868 li
735.388 230.69 li
735.37 230.33 li
735.73 230.33 li
735.37 230.33 li
1 /0 /CSD get_res sepcs
1 sep
f
792.43 345.964 mo
792.43 336.326 li
807.846 338.253 li
792.43 345.964 li
0 .9617 .904814 0 cmyk
f
792.43 346.367 mo
792.43 345.964 li
807.846 338.253 li
792.43 336.326 li
808.49 338.333 li
792.43 346.367 li
.593988 .999268 1 .557153 cmyk
f
808.71 311.931 mo
792.43 311.931 li
792.43 227.713 li
808.71 219.572 li
808.71 311.931 li
0 .638209 .362097 0 cmyk
f
808.71 337.635 mo
792.43 335.6 li
792.43 313.131 li
808.71 313.131 li
808.71 337.635 li
0 .69897 .437079 0 cmyk
f
808.71 313.131 mo
792.43 313.131 li
792.43 311.931 li
808.71 311.931 li
808.71 313.131 li
.48072 1 1 .248569 cmyk
f
808.71 337.635 mo
792.43 335.6 li
792.43 335.6 li
808.71 337.635 li
808.71 337.635 li
f
808.49 338.333 mo
792.43 336.326 li
792.43 335.6 li
808.71 337.635 li
808.71 313.131 li
808.71 311.931 li
808.71 219.572 li
809.07 219.392 li
809.07 338.043 li
808.49 338.333 li
.593988 .999268 1 .557153 cmyk
f
792.43 227.713 mo
792.43 227.49 li
792.43 227.433 792.417 227.378 792.392 227.329 cv
809.07 218.99 li
809.07 219.392 li
808.71 219.572 li
792.43 227.713 li
f
792.07 346.547 mo
792.07 227.49 li
792.392 227.329 li
792.417 227.378 792.43 227.433 792.43 227.49 cv
792.43 227.713 li
792.43 311.931 li
792.43 313.131 li
792.43 335.6 li
792.43 335.6 li
792.43 336.326 li
792.43 345.964 li
792.43 346.367 li
792.07 346.547 li
f
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
809.07 218.99 mo
792.07 227.49 li
792.07 346.547 li
809.07 338.043 li
809.07 218.99 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
301.71 261.2 mo
301.938 261.479 li
208.358 337.935 li
208.287 337.993 208.195 338.022 208.103 338.015 cv
156.893 334.15 li
156.746 334.139 156.621 334.039 156.577 333.899 cv
156.533 333.759 156.579 333.605 156.692 333.512 cv
336.112 186.921 li
336.243 186.815 336.428 186.813 336.561 186.916 cv
336.694 187.02 336.737 187.2 336.666 187.353 cv
302.036 261.353 li
301.938 261.479 li
301.71 261.2 li
301.384 261.047 li
335.344 188.478 li
157.845 333.5 li
208.014 337.286 li
301.482 260.921 li
301.71 261.2 li
301.384 261.047 li
301.71 261.2 li
f
156.92 333.791 mo
156.936 334.151 li
98.4168 336.728 li
98.2616 336.735 98.1201 336.641 98.0645 336.496 cv
98.0093 336.351 98.0527 336.188 98.1733 336.089 cv
365.002 118.081 li
365.13 117.977 365.313 117.973 365.445 118.072 cv
365.578 118.171 365.626 118.347 365.562 118.499 cv
336.672 187.339 li
336.568 187.479 li
157.148 334.07 li
156.936 334.151 li
156.92 333.791 li
156.692 333.512 li
336.043 186.978 li
364.339 119.553 li
99.4685 335.961 li
156.904 333.431 li
156.92 333.791 li
156.692 333.512 li
156.92 333.791 li
f
72.0661 341.006 mo
72.0035 340.651 li
98.2459 336.03 li
364.901 118.164 li
368.51 99.2658 li
72.2938 341.285 li
72.0661 341.006 li
72.0035 340.651 li
72.0661 341.006 li
71.8383 340.727 li
368.822 98.0812 li
368.939 97.9856 369.104 97.9733 369.234 98.0507 cv
369.364 98.128 369.432 98.2791 369.404 98.4275 cv
365.584 118.427 li
365.458 118.639 li
98.6289 336.647 li
98.4634 336.722 li
72.1284 341.361 li
71.9669 341.389 71.8071 341.305 71.7386 341.156 cv
71.6704 341.007 71.7111 340.831 71.8383 340.727 cv
72.0661 341.006 li
f
83.7202 346.252 mo
80.5925 344.737 li
73.225 341.167 li
94.5368 337.414 li
83.7202 346.252 li
.905547 .71957 0 0 cmyk
f
80.5925 344.737 mo
73.2248 341.167 li
73.2251 341.167 li
80.5925 344.737 li
1 1 .603418 .324254 cmyk
f
125.726 311.931 mo
108.221 311.931 li
292.446 161.413 li
328.247 132.162 li
317.909 154.907 li
131.275 307.397 li
125.726 311.931 li
.611902 .503014 0 0 cmyk
f
73.3617 340.412 mo
106.752 313.131 li
124.257 313.131 li
95.6774 336.482 li
73.3617 340.412 li
.680903 .569482 0 0 cmyk
f
124.257 313.131 mo
106.752 313.131 li
108.221 311.931 li
125.726 311.931 li
124.257 313.131 li
1 .989899 .441718 .00140383 cmyk
f
73.3617 340.412 mo
73.3617 340.412 li
95.6774 336.482 li
95.6773 336.482 li
73.3617 340.412 li
f
73.2248 341.167 mo
72.7305 340.928 li
292.446 161.413 li
108.221 311.931 li
106.752 313.131 li
73.3617 340.412 li
73.3617 340.412 li
95.6773 336.482 li
94.5368 337.414 li
73.2251 341.167 li
73.2248 341.167 li
1 1 .603418 .324254 cmyk
f
369.05 98.3599 mo
369.345 98.5656 li
344.765 133.876 li
344.698 133.949 li
83.9978 346.955 li
83.8893 347.043 83.7391 347.061 83.613 347 cv
71.9091 341.33 li
71.7985 341.277 71.7227 341.17 71.7084 341.048 cv
71.694 340.926 71.7432 340.805 71.8383 340.727 cv
368.822 98.0812 li
368.961 97.9678 369.163 97.974 369.294 98.0957 cv
369.426 98.2177 369.448 98.4186 369.345 98.5656 cv
369.05 98.3599 li
369.278 98.6389 li
72.7305 340.928 li
83.7202 346.252 li
344.203 133.423 li
368.755 98.1544 li
369.05 98.3599 li
369.278 98.6389 li
369.05 98.3599 li
1 /0 /CSD get_res sepcs
1 sep
f
142.165 347.601 mo
117.574 347.06 li
84.7533 346.337 li
95.9873 337.159 li
98.4394 336.727 li
156.914 334.151 li
158.483 334.27 li
142.165 347.601 li
.905547 .71957 0 0 cmyk
f
142.165 347.601 mo
117.574 347.06 li
142.165 347.601 li
142.165 347.601 li
95.9873 337.159 mo
95.9874 337.159 li
98.4394 336.727 li
98.4394 336.727 li
95.9873 337.159 li
1 1 .603418 .324254 cmyk
f
185.827 311.931 mo
184.245 311.931 li
283.335 230.971 li
282.396 233.037 li
185.827 311.931 li
.611902 .503014 0 0 cmyk
f
159.292 333.609 mo
157.845 333.5 li
161.859 330.221 li
182.776 313.131 li
184.358 313.131 li
159.292 333.609 li
.680903 .569482 0 0 cmyk
f
184.358 313.131 mo
182.776 313.131 li
184.245 311.931 li
185.827 311.931 li
184.358 313.131 li
1 .989899 .441718 .00140383 cmyk
f
158.483 334.27 mo
156.914 334.151 li
156.936 334.151 li
156.92 333.791 li
156.936 334.151 li
157.148 334.07 li
161.859 330.221 li
157.845 333.5 li
159.292 333.609 li
158.483 334.27 li
1 1 .603418 .324254 cmyk
f
183.107 311.931 mo
128.88 311.931 li
316.043 159.013 li
284.007 229.492 li
183.107 311.931 li
.611902 .503014 0 0 cmyk
f
99.4685 335.961 mo
127.411 313.131 li
181.638 313.131 li
156.785 333.437 li
99.4685 335.961 li
.680903 .569482 0 0 cmyk
f
181.638 313.131 mo
127.411 313.131 li
128.88 311.931 li
183.107 311.931 li
181.638 313.131 li
1 .989899 .441718 .00140383 cmyk
f
98.4394 336.727 mo
98.4634 336.722 li
98.6289 336.647 li
99.4685 335.961 li
156.785 333.437 li
181.638 313.131 li
183.107 311.931 li
284.007 229.492 li
283.335 230.971 li
184.245 311.931 li
182.776 313.131 li
161.859 330.221 li
157.148 334.07 li
156.936 334.151 li
156.92 333.791 li
156.692 333.512 li
156.92 333.791 li
156.936 334.151 li
156.914 334.151 li
98.4394 336.727 li
98.4394 336.727 li
1 1 .603418 .324254 cmyk
f
127.742 311.931 mo
126.864 311.931 li
317.237 156.386 li
316.715 157.533 li
127.742 311.931 li
.611902 .503014 0 0 cmyk
f
97.1279 336.227 mo
125.395 313.131 li
126.273 313.131 li
98.2459 336.03 li
97.1279 336.227 li
.680903 .569482 0 0 cmyk
f
126.273 313.131 mo
125.395 313.131 li
126.864 311.931 li
127.742 311.931 li
126.273 313.131 li
1 .989899 .441718 .00140383 cmyk
f
97.1278 336.227 mo
97.1279 336.227 li
98.246 336.03 li
98.2459 336.03 li
97.1278 336.227 li
f
95.9874 337.159 mo
97.1278 336.227 li
98.2459 336.03 li
126.273 313.131 li
127.742 311.931 li
316.715 157.533 li
316.043 159.013 li
128.88 311.931 li
127.411 313.131 li
99.4685 335.961 li
98.6289 336.647 li
98.4634 336.722 li
98.4394 336.727 li
95.9874 337.159 li
1 1 .603418 .324254 cmyk
f
83.77 346.676 mo
83.778 346.316 li
142.165 347.601 li
308.178 211.974 li
343.496 134.931 li
83.9978 346.955 li
83.77 346.676 li
83.778 346.316 li
83.77 346.676 li
83.5422 346.397 li
344.242 133.391 li
344.372 133.285 344.557 133.283 344.69 133.385 cv
344.823 133.487 344.867 133.668 344.797 133.82 cv
308.797 212.35 li
308.698 212.479 li
142.518 348.243 li
142.282 348.324 li
83.7621 347.036 li
83.611 347.033 83.4788 346.936 83.4296 346.793 cv
83.3805 346.65 83.4253 346.493 83.5422 346.397 cv
83.77 346.676 li
1 /0 /CSD get_res sepcs
1 sep
f
143.39 347.53 mo
159.525 334.349 li
207.25 337.951 li
200.664 343.748 li
191.292 344.367 li
143.39 347.53 li
.905547 .71957 0 0 cmyk
f
143.39 347.531 mo
143.39 347.53 li
191.292 344.367 li
143.39 347.531 li
200.664 343.748 mo
207.25 337.951 li
207.68 337.983 li
200.671 343.747 li
200.664 343.748 li
1 1 .603418 .324254 cmyk
f
239.048 311.931 mo
186.965 311.931 li
281.724 234.515 li
250.96 302.199 li
239.048 311.931 li
.611902 .503014 0 0 cmyk
f
208.014 337.286 mo
160.628 333.71 li
160.334 333.688 li
185.496 313.131 li
237.579 313.131 li
208.014 337.286 li
.680903 .569482 0 0 cmyk
f
237.579 313.131 mo
185.496 313.131 li
186.965 311.931 li
239.048 311.931 li
237.579 313.131 li
1 .989899 .441718 .00140383 cmyk
f
207.68 337.983 mo
207.25 337.951 li
159.525 334.349 li
160.334 333.688 li
160.628 333.71 li
208.014 337.286 li
237.579 313.131 li
239.048 311.931 li
250.96 302.199 li
250.82 302.506 li
207.68 337.983 li
1 1 .603418 .324254 cmyk
f
143.39 347.531 mo
281.724 234.515 li
281.724 234.515 li
186.965 311.931 li
185.496 313.131 li
160.334 333.688 li
159.525 334.349 li
143.39 347.53 li
143.39 347.531 li
f
142.29 347.964 mo
142.266 347.605 li
200.671 343.747 li
286.604 273.079 li
307.703 213.291 li
142.518 348.243 li
142.29 347.964 li
142.266 347.605 li
142.29 347.964 li
142.062 347.685 li
308.242 211.921 li
308.367 211.819 308.545 211.813 308.677 211.905 cv
308.809 211.998 308.863 212.168 308.809 212.32 cv
287.249 273.413 li
287.139 273.571 li
201.039 344.377 li
200.834 344.458 li
142.314 348.323 li
142.158 348.334 142.013 348.242 141.955 348.096 cv
141.898 347.95 141.941 347.784 142.062 347.685 cv
142.29 347.964 li
1 /0 /CSD get_res sepcs
1 sep
f
291.627 311.931 mo
247.327 311.931 li
251.406 302.956 li
287.035 273.656 li
308.766 274.226 li
291.627 311.931 li
330.178 129.655 mo
362.912 57.6373 li
432.529 1.94186 li
388.626 98.5293 li
369.06 98.0002 li
369.06 98.0002 li
369.056 98.0001 369.053 98 369.049 98 cv
368.971 98 368.897 98.0253 368.835 98.0708 cv
368.835 98.0711 368.835 98.0714 368.834 98.0717 cv
368.833 98.0728 368.831 98.0738 368.83 98.0749 cv
368.828 98.0761 368.827 98.0773 368.825 98.0786 cv
368.825 98.0787 368.825 98.0789 368.825 98.0791 cv
368.824 98.0798 368.823 98.0805 368.822 98.0812 cv
368.822 98.0812 li
330.178 129.655 li
.142367 .107179 .107179 0 cmyk
f
221.841 368.002 mo
246.781 313.131 li
290.424 313.131 li
221.841 368.002 li
.243687 .188174 .178805 0 cmyk
f
290.424 313.131 mo
246.781 313.131 li
247.327 311.931 li
291.627 311.931 li
291.458 312.304 li
290.424 313.131 li
.803983 .752743 .731929 .508019 cmyk
f
319.167 153.879 mo
329.505 131.134 li
367.283 100.269 li
344.203 133.423 li
319.167 153.879 li
.54815 .466529 0 0 cmyk
f
329.505 131.134 mo
330.178 129.655 li
368.822 98.0812 li
368.822 98.0812 li
368.823 98.0805 368.824 98.0798 368.825 98.0791 cv
368.798 98.1004 368.774 98.1257 368.755 98.1544 cv
368.755 98.1544 li
368.754 98.1556 368.754 98.1558 368.753 98.156 cv
367.283 100.269 li
329.505 131.134 li
368.825 98.0786 mo
368.827 98.0773 368.828 98.0761 368.83 98.0749 cv
368.828 98.0761 368.827 98.0773 368.825 98.0786 cv
368.834 98.0717 mo
368.835 98.0714 368.835 98.0711 368.835 98.0708 cv
368.835 98.0711 368.835 98.0714 368.834 98.0717 cv
.803983 .752743 .731929 .508019 cmyk
f
283.654 232.009 mo
284.593 229.944 li
309.13 209.896 li
308.177 211.974 li
297.272 220.884 li
283.654 232.009 li
.54815 .466529 0 0 cmyk
f
285.265 228.465 mo
317.301 157.985 li
342.285 137.571 li
309.812 208.41 li
285.265 228.465 li
f
284.593 229.944 mo
285.265 228.465 li
309.812 208.41 li
309.13 209.896 li
284.593 229.944 li
.939635 .956573 .415137 .0754406 cmyk
f
317.973 156.505 mo
318.495 155.358 li
343.496 134.931 li
342.967 136.085 li
317.973 156.505 li
.54815 .466529 0 0 cmyk
f
317.301 157.985 mo
317.973 156.505 li
342.967 136.085 li
342.285 137.571 li
317.301 157.985 li
.939635 .956573 .415137 .0754406 cmyk
f
297.272 220.884 mo
308.178 211.974 li
308.177 211.974 li
297.272 220.884 li
318.495 155.358 mo
319.167 153.879 li
344.203 133.423 li
344.177 133.461 li
344.164 133.48 344.152 133.499 344.143 133.52 cv
344.143 133.52 li
343.496 134.931 li
318.495 155.358 li
.803983 .752743 .731929 .508019 cmyk
f
252.218 301.171 mo
282.982 233.488 li
307.703 213.292 li
297.722 241.573 li
286.605 273.076 li
252.218 301.171 li
.54815 .466529 0 0 cmyk
f
252.083 301.468 mo
252.218 301.171 li
286.605 273.076 li
286.604 273.079 li
252.083 301.468 li
.939635 .956573 .415137 .0754406 cmyk
f
282.982 233.488 mo
282.982 233.487 li
307.703 213.291 li
282.982 233.488 li
f
251.406 302.956 mo
252.083 301.468 li
286.604 273.079 li
286.57 273.173 li
286.57 273.173 li
286.57 273.175 286.569 273.178 286.568 273.18 cv
286.568 273.18 286.568 273.18 286.568 273.181 cv
286.533 273.288 286.549 273.404 286.613 273.497 cv
286.676 273.588 286.776 273.645 286.886 273.652 cv
286.887 273.652 286.887 273.652 286.887 273.652 cv
286.889 273.652 286.891 273.652 286.893 273.653 cv
286.893 273.653 286.894 273.653 286.894 273.653 cv
286.896 273.653 286.898 273.653 286.901 273.653 cv
287.035 273.656 li
251.406 302.956 li
297.722 241.573 mo
307.703 213.291 li
282.982 233.487 li
283.654 232.009 li
297.272 220.884 li
308.177 211.974 li
308.145 212.044 li
308.14 212.056 308.135 212.068 308.13 212.08 cv
308.13 212.08 li
297.722 241.573 li
.803983 .752743 .731929 .508019 cmyk
f
291.75 312.531 mo
291.975 312.812 li
221.115 369.505 li
220.985 369.609 220.8 369.61 220.669 369.508 cv
220.538 369.406 220.493 369.226 220.562 369.075 cv
362.292 57.2609 li
362.395 57.129 li
433.255 .438932 li
433.385 .334944 433.57 .333807 433.701 .435974 cv
433.832 .538141 433.877 .717673 433.808 .86899 cv
292.078 312.68 li
291.975 312.812 li
291.75 312.531 li
291.422 312.382 li
432.529 1.94186 li
362.912 57.6373 li
221.841 368.002 li
291.525 312.25 li
291.75 312.531 li
291.422 312.382 li
291.75 312.531 li
1 /0 /CSD get_res sepcs
1 sep
f
365.23 118.36 mo
365.562 118.499 li
336.672 187.339 li
336.666 187.353 li
302.036 261.353 li
301.938 261.479 li
287.138 273.572 li
287.013 273.674 286.835 273.68 286.703 273.587 cv
286.571 273.495 286.517 273.325 286.57 273.173 cv
308.13 212.08 li
308.143 212.05 li
344.143 133.52 li
344.175 133.464 li
368.755 98.1544 li
368.851 98.0152 369.033 97.9624 369.19 98.0281 cv
369.346 98.0939 369.435 98.2609 369.404 98.4275 cv
365.584 118.427 li
365.562 118.499 li
365.23 118.36 li
364.876 118.293 li
368.379 99.9541 li
344.784 133.849 li
308.804 212.335 li
287.677 272.201 li
301.419 260.973 li
336.011 187.053 li
364.898 118.221 li
365.23 118.36 li
364.876 118.293 li
365.23 118.36 li
f
369.05 98.3599 mo
369.06 98.0002 li
609.06 104.49 li
609.195 104.494 609.316 104.573 609.375 104.695 cv
618.995 124.845 li
619.049 124.958 619.04 125.091 618.972 125.196 cv
618.904 125.301 618.786 125.363 618.66 125.36 cv
365.221 118.72 li
365.115 118.717 365.016 118.668 364.95 118.586 cv
364.884 118.504 364.856 118.396 364.876 118.293 cv
368.696 98.2925 li
368.729 98.1196 368.884 97.9954 369.06 98.0002 cv
369.05 98.3599 li
369.404 98.4275 li
365.663 118.011 li
618.092 124.625 li
608.82 105.204 li
369.04 98.7199 li
369.05 98.3599 li
369.404 98.4275 li
369.05 98.3599 li
f
365.23 118.36 mo
365.239 118 li
618.679 124.64 li
618.848 124.645 618.99 124.764 619.023 124.929 cv
633.023 194.899 li
633.044 195.007 633.016 195.118 632.945 195.202 cv
632.875 195.286 632.77 195.333 632.66 195.33 cv
336.33 187.56 li
336.211 187.557 336.102 187.495 336.038 187.395 cv
335.973 187.295 335.962 187.171 336.008 187.061 cv
364.898 118.221 li
364.956 118.083 365.091 117.996 365.239 118 cv
365.23 118.36 li
365.562 118.499 li
336.876 186.854 li
632.228 194.598 li
618.373 125.352 li
365.221 118.72 li
365.23 118.36 li
365.562 118.499 li
365.23 118.36 li
f
336.34 187.2 mo
336.349 186.84 li
632.679 194.61 li
632.853 194.615 633 194.744 633.026 194.916 cv
644.466 270.116 li
644.482 270.221 644.45 270.328 644.38 270.408 cv
644.309 270.488 644.207 270.533 644.1 270.53 cv
301.701 261.56 li
301.579 261.557 301.468 261.493 301.404 261.389 cv
301.34 261.286 301.332 261.157 301.384 261.047 cv
336.014 187.047 li
336.075 186.917 336.206 186.836 336.349 186.84 cv
336.34 187.2 li
336.666 187.353 li
302.269 260.855 li
643.689 269.799 li
632.359 195.322 li
336.33 187.56 li
336.34 187.2 li
336.666 187.353 li
336.34 187.2 li
f
286.91 273.293 mo
286.92 272.933 li
628.182 281.879 li
643.08 270.503 li
301.834 261.563 li
287.138 273.572 li
286.91 273.293 li
286.92 272.933 li
286.91 273.293 li
286.682 273.014 li
301.482 260.921 li
301.719 260.84 li
644.119 269.81 li
644.271 269.814 644.406 269.914 644.452 270.059 cv
644.499 270.204 644.449 270.364 644.328 270.456 cv
628.518 282.528 li
628.29 282.602 li
286.901 273.653 li
286.75 273.649 286.618 273.551 286.569 273.409 cv
286.521 273.268 286.566 273.109 286.682 273.014 cv
286.91 273.293 li
f
358.415 133.669 mo
347.409 133.386 li
364.339 119.553 li
358.415 133.669 li
.830686 .694423 0 0 cmyk
f
346.305 133.357 mo
345.147 133.327 li
356.852 116.513 li
368.379 99.9541 li
366.647 109.021 li
364.901 118.164 li
346.305 133.357 li
f
347.409 133.386 mo
346.305 133.357 li
364.901 118.164 li
364.883 118.256 li
364.339 119.553 li
347.409 133.386 li
366.647 109.021 mo
368.379 99.9544 li
368.379 99.9541 li
366.647 109.021 li
.961517 .877256 0 0 cmyk
f
345.147 133.327 mo
345.147 133.327 li
347.438 130.036 li
356.852 116.513 li
345.147 133.327 li
f
347.438 130.036 mo
368.379 99.954 li
368.379 99.9544 li
368.379 99.9541 li
356.852 116.513 li
347.438 130.036 li
1 1 .603418 .324254 cmyk
f
576.785 123.542 mo
380.387 118.397 li
389.084 99.2619 li
574.156 104.267 li
576.785 123.542 li
.611902 .503014 0 0 cmyk
f
379.605 118.376 mo
365.663 118.011 li
369.346 98.7281 li
388.303 99.2408 li
379.605 118.376 li
.680903 .569482 0 0 cmyk
f
380.387 118.397 mo
379.605 118.376 li
388.303 99.2408 li
389.084 99.2619 li
380.387 118.397 li
1 .989899 .441718 .00140383 cmyk
f
365.663 118.011 mo
365.663 118.011 li
369.346 98.7281 li
365.663 118.011 li
f
364.883 118.256 mo
364.901 118.164 li
366.647 109.021 li
368.379 99.9544 li
368.379 99.954 li
369.234 98.7251 li
369.346 98.7281 li
365.663 118.011 li
365.239 118 li
365.236 118 365.233 118 365.23 118 cv
365.085 118 364.954 118.086 364.898 118.221 cv
364.883 118.256 li
1 1 .603418 .324254 cmyk
f
578.941 139.358 mo
373.271 134.053 li
380.063 119.109 li
576.883 124.265 li
578.941 139.358 li
.611902 .503014 0 0 cmyk
f
372.489 134.033 mo
359.187 133.689 li
365.467 118.726 li
379.282 119.088 li
372.489 134.033 li
.680903 .569482 0 0 cmyk
f
373.271 134.053 mo
372.489 134.033 li
379.282 119.088 li
380.063 119.109 li
373.271 134.053 li
1 .989899 .441718 .00140383 cmyk
f
359.187 133.689 mo
358.415 133.669 li
364.339 119.553 li
364.883 118.256 li
364.898 118.221 li
364.954 118.086 365.085 118 365.23 118 cv
365.233 118 365.236 118 365.239 118 cv
365.239 118 li
365.663 118.011 li
365.663 118.011 li
379.605 118.376 li
380.387 118.397 li
576.785 123.542 li
576.883 124.265 li
380.063 119.109 li
379.282 119.088 li
365.467 118.726 li
359.187 133.689 li
365.562 118.499 mo
365.562 118.499 li
365.23 118.36 mo
365.23 118.36 li
365.562 118.499 li
365.23 118.36 li
1 1 .603418 .324254 cmyk
f
369.05 98.3599 mo
369.345 98.5656 li
345.147 133.327 li
604.66 140.022 li
608.648 105.199 li
369.04 98.7199 li
369.05 98.3599 li
369.345 98.5656 li
369.05 98.3599 li
369.06 98.0002 li
609.06 104.49 li
609.161 104.493 609.255 104.537 609.322 104.614 cv
609.388 104.691 609.419 104.79 609.408 104.891 cv
605.337 140.431 li
605.316 140.617 605.157 140.755 604.971 140.75 cv
344.461 134.03 li
344.329 134.026 344.208 133.95 344.149 133.833 cv
344.089 133.715 344.099 133.573 344.175 133.464 cv
368.755 98.1544 li
368.824 98.0545 368.938 97.9967 369.06 98.0002 cv
369.05 98.3599 li
1 /0 /CSD get_res sepcs
1 sep
f
324.221 212.247 mo
309.025 211.854 li
310.396 208.861 li
335.344 188.478 li
324.221 212.247 li
.830686 .694423 0 0 cmyk
f
311.078 207.375 mo
343.552 136.537 li
346.554 134.084 li
358.116 134.382 li
336.043 186.978 li
311.078 207.375 li
f
310.396 208.861 mo
311.078 207.375 li
336.043 186.978 li
336.011 187.053 li
335.344 188.478 li
310.396 208.861 li
.961517 .877256 0 0 cmyk
f
344.234 135.05 mo
344.698 134.036 li
345.451 134.055 li
344.234 135.05 li
.830686 .694423 0 0 cmyk
f
343.552 136.537 mo
344.234 135.05 li
345.451 134.055 li
346.554 134.084 li
343.552 136.537 li
.961517 .877256 0 0 cmyk
f
586.31 193.394 mo
349.124 187.175 li
372.947 134.765 li
579.04 140.081 li
586.31 193.394 li
.611902 .503014 0 0 cmyk
f
348.343 187.155 mo
336.876 186.854 li
358.888 134.402 li
372.165 134.745 li
348.343 187.155 li
.680903 .569482 0 0 cmyk
f
349.124 187.175 mo
348.343 187.155 li
372.165 134.745 li
372.947 134.765 li
349.124 187.175 li
1 .989899 .441718 .00140383 cmyk
f
336.876 186.854 mo
336.876 186.854 li
358.888 134.402 li
336.876 186.854 li
f
336.011 187.053 mo
336.043 186.978 li
358.116 134.382 li
358.888 134.402 li
336.876 186.854 li
336.349 186.84 li
336.346 186.84 336.343 186.84 336.34 186.84 cv
336.2 186.84 336.073 186.92 336.014 187.047 cv
336.011 187.053 li
1 1 .603418 .324254 cmyk
f
589.816 219.106 mo
436.689 215.151 li
337.572 212.591 li
348.801 187.887 li
586.408 194.117 li
589.816 219.106 li
.611902 .503014 0 0 cmyk
f
336.79 212.571 mo
325.007 212.267 li
336.566 187.566 li
348.019 187.866 li
336.79 212.571 li
.680903 .569482 0 0 cmyk
f
337.572 212.591 mo
336.79 212.571 li
348.019 187.866 li
348.801 187.887 li
337.572 212.591 li
1 .989899 .441718 .00140383 cmyk
f
586.408 194.117 mo
348.801 187.887 li
348.019 187.866 li
336.566 187.566 li
586.408 194.117 li
586.408 194.117 li
f
325.007 212.267 mo
324.221 212.247 li
335.344 188.478 li
336.011 187.053 li
336.014 187.047 li
336.073 186.92 336.2 186.84 336.34 186.84 cv
336.343 186.84 336.346 186.84 336.349 186.84 cv
336.349 186.84 li
336.876 186.854 li
336.876 186.854 li
348.343 187.155 li
349.124 187.175 li
586.31 193.394 li
586.408 194.117 li
336.566 187.566 li
325.007 212.267 li
336.666 187.353 mo
336.666 187.353 li
336.34 187.2 mo
336.34 187.2 li
336.666 187.353 li
336.34 187.2 li
1 1 .603418 .324254 cmyk
f
579.04 140.081 mo
372.947 134.765 li
372.165 134.745 li
358.888 134.402 li
358.116 134.382 li
346.554 134.084 li
345.451 134.055 li
344.698 134.036 li
579.04 140.081 li
579.04 140.081 li
f
344.47 133.67 mo
344.797 133.82 li
309.024 211.854 li
615.128 219.759 li
604.663 140.742 li
344.461 134.03 li
344.47 133.67 li
344.797 133.82 li
344.47 133.67 li
344.479 133.31 li
604.989 140.03 li
605.166 140.035 605.314 140.167 605.337 140.343 cv
615.897 220.083 li
615.911 220.187 615.878 220.292 615.808 220.371 cv
615.737 220.449 615.636 220.493 615.531 220.49 cv
308.461 212.56 li
308.34 212.557 308.228 212.493 308.165 212.391 cv
308.101 212.288 308.092 212.159 308.143 212.05 cv
344.143 133.52 li
344.203 133.389 344.335 133.306 344.479 133.31 cv
344.47 133.67 li
1 /0 /CSD get_res sepcs
1 sep
f
287.678 272.2 mo
308.722 212.567 li
323.888 212.958 li
301.418 260.973 li
287.678 272.2 li
.830686 .694423 0 0 cmyk
f
287.677 272.201 mo
287.678 272.2 li
301.418 260.973 li
300.824 261.459 li
287.677 272.201 li
.961517 .877256 0 0 cmyk
f
287.677 272.201 mo
287.677 272.201 li
300.824 261.459 li
287.677 272.201 li
1 1 .603418 .324254 cmyk
f
596.56 268.564 mo
315.477 261.2 li
337.248 213.303 li
589.914 219.828 li
596.56 268.564 li
.611902 .503014 0 0 cmyk
f
314.695 261.18 mo
302.269 260.854 li
324.674 212.979 li
336.466 213.283 li
314.695 261.18 li
.680903 .569482 0 0 cmyk
f
315.477 261.2 mo
314.695 261.18 li
336.466 213.283 li
337.248 213.303 li
315.477 261.2 li
1 .989899 .441718 .00140383 cmyk
f
301.418 260.973 mo
301.418 260.973 li
323.888 212.958 li
324.674 212.979 li
302.269 260.855 li
301.719 260.84 li
301.482 260.921 li
301.418 260.973 li
1 1 .603418 .324254 cmyk
f
598.269 281.095 mo
309.871 273.535 li
315.154 261.912 li
596.659 269.287 li
598.269 281.095 li
.611902 .503014 0 0 cmyk
f
309.089 273.514 mo
287.888 272.958 li
301.834 261.563 li
314.372 261.892 li
309.089 273.514 li
.680903 .569482 0 0 cmyk
f
309.871 273.535 mo
309.089 273.514 li
314.372 261.892 li
315.154 261.912 li
309.871 273.535 li
1 .989899 .441718 .00140383 cmyk
f
598.269 281.095 mo
287.414 272.946 li
287.677 272.201 li
300.824 261.459 li
301.418 260.973 li
301.482 260.921 li
301.719 260.84 li
302.269 260.854 li
314.695 261.18 li
315.477 261.2 li
596.56 268.564 li
596.659 269.287 li
315.154 261.912 li
314.372 261.892 li
301.834 261.563 li
287.888 272.958 li
309.089 273.514 li
309.871 273.535 li
598.269 281.095 li
598.269 281.095 li
1 1 .603418 .324254 cmyk
f
589.914 219.828 mo
337.248 213.303 li
336.466 213.283 li
324.674 212.979 li
323.888 212.958 li
308.722 212.567 li
589.914 219.828 li
589.914 219.828 li
f
308.47 212.2 mo
308.809 212.32 li
287.414 272.946 li
627.856 281.87 li
615.245 220.482 li
308.461 212.56 li
308.47 212.2 li
308.809 212.32 li
308.47 212.2 li
308.479 211.84 li
615.549 219.77 li
615.716 219.775 615.859 219.894 615.893 220.058 cv
628.653 282.17 li
628.675 282.276 628.646 282.389 628.576 282.473 cv
628.506 282.557 628.4 282.605 628.29 282.602 cv
286.901 273.653 li
286.785 273.65 286.679 273.592 286.613 273.497 cv
286.548 273.402 286.532 273.282 286.57 273.173 cv
308.13 212.08 li
308.183 211.932 308.323 211.836 308.479 211.84 cv
308.47 212.2 li
1 /0 /CSD get_res sepcs
1 sep
f
666.895 311.931 mo
603.201 311.931 li
599.097 281.837 li
628.254 282.601 li
664.008 290.765 li
666.895 311.931 li
639.559 111.469 mo
609.137 104.501 li
609.12 104.496 609.103 104.493 609.085 104.492 cv
609.085 104.492 li
609.084 104.491 609.082 104.491 609.081 104.491 cv
609.079 104.491 609.078 104.491 609.076 104.491 cv
609.076 104.491 609.076 104.491 609.076 104.491 cv
609.067 104.49 609.058 104.49 609.05 104.49 cv
609.049 104.49 609.049 104.49 609.049 104.49 cv
574.787 103.563 li
568.511 57.5383 li
624.561 1.48791 li
639.559 111.469 li
.142367 .107179 .107179 0 cmyk
f
610.909 368.456 mo
603.364 313.131 li
666.231 313.131 li
610.909 368.456 li
.243687 .188174 .178805 0 cmyk
f
666.231 313.131 mo
603.364 313.131 li
603.201 311.931 li
666.895 311.931 li
666.959 312.403 li
666.231 313.131 li
.803983 .752743 .731929 .508019 cmyk
f
606.458 124.32 mo
577.514 123.562 li
574.886 104.286 li
608.648 105.199 li
606.458 124.32 li
.54815 .466529 0 0 cmyk
f
604.66 140.022 mo
579.671 139.377 li
577.613 124.284 li
606.376 125.038 li
605.848 129.65 li
604.66 140.022 li
f
606.376 125.038 mo
577.613 124.284 li
577.514 123.562 li
606.458 124.32 li
606.376 125.038 li
.939635 .956573 .415137 .0754406 cmyk
f
604.66 140.022 mo
579.671 139.377 li
579.671 139.377 li
604.66 140.022 li
604.66 140.022 li
605.848 129.65 mo
606.376 125.038 li
606.458 124.32 li
608.648 105.199 li
574.886 104.286 li
574.787 103.563 li
609.049 104.49 li
609.007 104.49 608.966 104.497 608.926 104.512 cv
608.926 104.512 608.925 104.512 608.925 104.512 cv
608.924 104.513 608.922 104.513 608.921 104.514 cv
608.84 104.545 608.774 104.604 608.733 104.679 cv
608.733 104.679 608.733 104.679 608.733 104.679 cv
608.732 104.681 608.731 104.683 608.73 104.685 cv
608.729 104.686 608.729 104.687 608.728 104.688 cv
608.728 104.689 608.727 104.69 608.727 104.691 cv
608.726 104.692 608.725 104.694 608.724 104.696 cv
608.724 104.696 608.724 104.697 608.724 104.697 cv
608.723 104.699 608.722 104.7 608.722 104.702 cv
608.721 104.702 608.721 104.703 608.721 104.703 cv
608.72 104.705 608.719 104.707 608.719 104.709 cv
608.718 104.709 608.718 104.71 608.718 104.71 cv
608.708 104.734 608.7 104.76 608.696 104.787 cv
608.696 104.787 608.696 104.787 608.696 104.787 cv
608.695 104.792 608.694 104.796 608.693 104.801 cv
608.693 104.801 608.693 104.802 608.693 104.802 cv
608.693 104.804 608.693 104.807 608.692 104.809 cv
608.692 104.809 li
605.848 129.65 li
.803983 .752743 .731929 .508019 cmyk
f
611.724 194.061 mo
609.388 194 li
587.039 193.413 li
579.769 140.1 li
604.663 140.742 li
610.323 183.476 li
611.724 194.061 li
.54815 .466529 0 0 cmyk
f
615.128 219.759 mo
590.545 219.124 li
587.138 194.136 li
611.82 194.783 li
615.128 219.759 li
f
611.82 194.783 mo
587.138 194.136 li
587.138 194.136 li
611.82 194.783 li
611.82 194.783 li
.941985 .931304 .0773632 0 cmyk
f
611.82 194.783 mo
587.138 194.136 li
587.039 193.413 li
609.388 194 li
611.724 194.061 li
611.82 194.783 li
.939635 .956573 .415137 .0754406 cmyk
f
604.663 140.742 mo
579.769 140.1 li
579.769 140.1 li
604.663 140.742 li
f
615.128 219.759 mo
590.545 219.124 li
590.545 219.124 li
615.128 219.759 li
615.128 219.759 li
610.323 183.476 mo
604.663 140.742 li
579.769 140.1 li
579.671 139.377 li
604.66 140.022 li
604.623 140.342 li
604.619 140.373 604.619 140.405 604.623 140.437 cv
610.323 183.476 li
.803983 .752743 .731929 .508019 cmyk
f
625.277 269.316 mo
597.29 268.583 li
590.644 219.847 li
615.245 220.483 li
625.277 269.316 li
.54815 .466529 0 0 cmyk
f
627.856 281.87 mo
598.998 281.114 li
597.388 269.306 li
625.426 270.041 li
627.856 281.87 li
f
627.856 281.87 mo
598.998 281.114 li
598.998 281.114 li
627.856 281.87 li
627.856 281.87 li
625.426 270.041 mo
597.388 269.306 li
597.29 268.583 li
625.277 269.316 li
625.426 270.041 li
.939635 .956573 .415137 .0754406 cmyk
f
615.245 220.483 mo
590.644 219.847 li
590.644 219.847 li
615.245 220.482 li
f
628.254 282.601 mo
599.097 281.837 li
598.998 281.114 li
627.856 281.87 li
625.426 270.041 li
625.277 269.316 li
615.245 220.482 li
590.644 219.847 li
590.545 219.124 li
615.128 219.759 li
615.183 220.177 li
615.185 220.188 615.186 220.199 615.189 220.209 cv
627.945 282.305 li
627.946 282.31 627.947 282.314 627.948 282.318 cv
627.978 282.455 628.083 282.562 628.22 282.593 cv
628.254 282.601 li
.803983 .752743 .731929 .508019 cmyk
f
667.34 312.531 mo
666.983 312.58 li
624.561 1.48791 li
568.511 57.5383 li
610.909 368.456 li
667.085 312.276 li
667.34 312.531 li
666.983 312.58 li
667.34 312.531 li
667.595 312.786 li
610.905 369.479 li
610.808 369.575 610.664 369.609 610.535 369.565 cv
610.406 369.521 610.312 369.408 610.293 369.272 cv
567.773 57.4587 li
567.758 57.3467 567.795 57.2355 567.875 57.1554 cv
624.565 .465555 li
624.662 .368848 624.805 .335172 624.935 .37886 cv
625.064 .422549 625.158 .536093 625.177 .671482 cv
667.697 312.482 li
667.712 312.594 667.674 312.706 667.595 312.786 cv
667.34 312.531 li
1 /0 /CSD get_res sepcs
1 sep
f
618.67 125 mo
619.023 124.929 li
633.023 194.899 li
633.026 194.916 li
644.466 270.116 li
644.486 270.246 644.433 270.376 644.328 270.456 cv
628.518 282.528 li
628.42 282.603 628.29 282.623 628.174 282.579 cv
628.058 282.536 627.972 282.436 627.947 282.314 cv
615.187 220.203 li
615.183 220.177 li
604.623 140.437 li
604.622 140.349 li
608.692 104.809 li
608.711 104.649 608.832 104.522 608.99 104.495 cv
609.149 104.468 609.305 104.55 609.375 104.695 cv
618.995 124.845 li
619.023 124.929 li
618.67 125 li
618.345 125.155 li
609.265 106.136 li
605.343 140.387 li
615.895 220.071 li
628.537 281.608 li
643.722 270.013 li
632.315 195.032 li
618.317 125.071 li
618.67 125 li
618.345 125.155 li
618.67 125 li
f
627.66 192.06 mo
627.66 189.71 625.75 187.81 623.4 187.81 cv
621.06 187.81 619.15 189.71 619.15 192.06 cv
619.15 194.41 621.06 196.31 623.4 196.31 cv
625.75 196.31 627.66 194.41 627.66 192.06 cv
.464942 0 1 0 cmyk
ef
627.66 192.06 mo
624.66 192.06 li
624.658 191.706 624.525 191.415 624.293 191.178 cv
624.057 190.947 623.758 190.811 623.4 190.81 cv
623.05 190.811 622.754 190.945 622.517 191.177 cv
622.285 191.413 622.152 191.706 622.15 192.06 cv
622.152 192.414 622.285 192.706 622.517 192.943 cv
622.754 193.175 623.05 193.309 623.4 193.31 cv
623.758 193.309 624.057 193.173 624.293 192.941 cv
624.525 192.705 624.658 192.414 624.66 192.06 cv
627.66 192.06 li
630.66 192.06 li
630.661 194.056 629.839 195.89 628.529 197.191 cv
627.223 198.497 625.392 199.311 623.4 199.31 cv
621.41 199.311 619.581 198.495 618.278 197.189 cv
616.97 195.889 616.148 194.056 616.15 192.06 cv
616.148 190.064 616.97 188.232 618.278 186.931 cv
619.581 185.625 621.41 184.809 623.4 184.81 cv
625.392 184.809 627.223 185.623 628.529 186.929 cv
629.839 188.23 630.661 190.064 630.66 192.06 cv
627.66 192.06 li
f
609.05 104.85 mo
609.375 104.695 li
618.92 124.688 li
775.069 160.345 li
772.864 142.745 li
608.97 105.201 li
609.05 104.85 li
609.375 104.695 li
609.05 104.85 li
609.13 104.499 li
773.27 142.099 li
773.418 142.133 773.528 142.255 773.547 142.405 cv
775.847 160.765 li
775.862 160.882 775.819 160.998 775.731 161.077 cv
775.644 161.156 775.525 161.187 775.41 161.161 cv
618.59 125.351 li
618.482 125.326 618.393 125.255 618.345 125.155 cv
608.725 105.005 li
608.666 104.881 608.683 104.732 608.769 104.625 cv
608.855 104.517 608.996 104.468 609.13 104.499 cv
609.05 104.85 li
1 /0 /CSD get_res sepcs
1 sep
f
618.67 125 mo
619.023 124.929 li
632.977 194.669 li
765.432 224.115 li
775.083 161.086 li
618.59 125.351 li
618.67 125 li
619.023 124.929 li
618.67 125 li
618.75 124.649 li
775.57 160.459 li
775.754 160.501 775.874 160.678 775.846 160.865 cv
766.086 224.604 li
766.071 224.704 766.016 224.791 765.933 224.847 cv
765.851 224.904 765.75 224.923 765.652 224.901 cv
632.592 195.321 li
632.453 195.291 632.345 195.18 632.317 195.041 cv
618.317 125.071 li
618.293 124.951 618.332 124.827 618.419 124.742 cv
618.506 124.657 618.631 124.622 618.75 124.649 cv
618.67 125 li
f
632.67 194.97 mo
633.026 194.916 li
644.429 269.874 li
746.444 293.171 li
765.282 224.819 li
632.592 195.321 li
632.67 194.97 li
633.026 194.916 li
632.67 194.97 li
632.748 194.619 li
765.808 224.199 li
765.904 224.22 765.987 224.28 766.038 224.364 cv
766.089 224.449 766.103 224.55 766.077 224.646 cv
747.047 293.695 li
746.996 293.88 746.807 293.993 746.62 293.95 cv
644.03 270.521 li
643.886 270.488 643.776 270.37 643.754 270.224 cv
632.314 195.024 li
632.296 194.906 632.337 194.788 632.424 194.707 cv
632.511 194.626 632.632 194.593 632.748 194.619 cv
632.67 194.97 li
f
644.11 270.17 mo
644.19 269.819 li
746.78 293.248 li
746.926 293.281 747.036 293.401 747.057 293.55 cv
747.077 293.698 747.004 293.843 746.872 293.915 cv
726.612 304.968 li
726.36 305.003 li
628.22 282.593 li
628.083 282.562 627.978 282.455 627.948 282.318 cv
627.918 282.182 627.97 282.041 628.081 281.956 cv
643.891 269.884 li
643.976 269.819 644.086 269.795 644.19 269.819 cv
644.11 270.17 li
644.328 270.456 li
629.129 282.062 li
726.387 304.271 li
745.693 293.738 li
644.03 270.521 li
644.11 270.17 li
644.328 270.456 li
644.11 270.17 li
f
775.069 160.345 mo
764.748 157.988 li
772.967 143.568 li
774.208 153.47 li
775.069 160.345 li
.743069 .618555 0 0 cmyk
f
744.026 214.599 mo
755.195 174.75 li
764.376 158.641 li
775.083 161.086 li
767.077 213.377 li
763.765 212.963 li
763.755 212.962 763.746 212.961 763.736 212.96 cv
763.736 212.96 763.736 212.96 763.736 212.96 cv
763.734 212.96 763.732 212.96 763.73 212.96 cv
763.727 212.96 763.723 212.96 763.719 212.96 cv
763.71 212.96 763.7 212.96 763.69 212.961 cv
744.026 214.599 li
f
767.077 213.377 mo
763.765 212.963 li
763.764 212.963 li
763.755 212.962 763.745 212.961 763.736 212.96 cv
763.746 212.961 763.755 212.962 763.765 212.963 cv
763.765 212.963 li
767.077 213.377 li
763.736 212.96 mo
763.734 212.96 763.732 212.96 763.73 212.96 cv
763.732 212.96 763.734 212.96 763.736 212.96 cv
1 .953765 .113283 0 cmyk
f
744.026 214.599 mo
744.026 214.599 li
763.69 212.961 li
763.7 212.96 763.71 212.96 763.719 212.96 cv
763.723 212.96 763.727 212.96 763.73 212.96 cv
763.732 212.96 763.734 212.96 763.736 212.96 cv
763.736 212.96 763.736 212.96 763.736 212.96 cv
763.745 212.961 763.755 212.962 763.764 212.963 cv
763.69 212.961 li
744.026 214.599 li
f
765.432 224.115 mo
764.08 223.815 li
764.08 213.728 li
766.968 214.089 li
765.432 224.115 li
.772488 .818875 0 0 cmyk
f
763.36 223.654 mo
760.025 222.913 li
752.146 221.161 li
752.096 221.095 752.024 221.045 751.937 221.026 cv
742.809 218.942 li
743.819 215.339 li
763.36 213.711 li
763.36 223.654 li
f
764.08 223.815 mo
763.36 223.654 li
763.36 213.711 li
763.713 213.682 li
764.08 213.728 li
764.08 223.815 li
.953002 .978637 0 0 cmyk
f
743.819 215.339 mo
744.026 214.599 li
763.69 212.961 li
763.764 212.963 li
763.765 212.963 li
767.077 213.377 li
766.968 214.089 li
764.08 213.728 li
763.713 213.682 li
763.36 213.711 li
743.819 215.339 li
1 .953765 .113283 0 cmyk
f
765.432 224.115 mo
765.432 224.115 li
766.968 214.089 li
767.077 213.377 li
775.083 161.086 li
764.376 158.641 li
764.748 157.988 li
775.069 160.345 li
775.126 160.805 li
765.432 224.115 li
760.025 222.913 mo
752.146 221.161 li
752.146 221.161 li
760.025 222.913 li
1 .999237 .517693 .0429999 cmyk
f
764.08 228.532 mo
764.08 224.552 li
765.282 224.819 li
764.434 227.898 li
764.262 228.522 li
764.08 228.532 li
.772488 .818875 0 0 cmyk
f
739.78 229.749 mo
742.576 219.772 li
763.36 224.392 li
763.36 228.568 li
739.78 229.749 li
f
763.36 228.568 mo
763.36 224.392 li
764.08 224.552 li
764.08 228.532 li
763.36 228.568 li
.953002 .978637 0 0 cmyk
f
739.78 229.749 mo
739.78 229.749 li
763.36 228.568 li
764.08 228.532 li
764.262 228.522 li
739.78 229.749 li
1 .953765 .113283 0 cmyk
f
735.01 290.56 mo
728.974 289.182 li
734.843 247.364 li
735.01 246.769 li
735.01 290.56 li
.776059 .789914 0 0 cmyk
f
746.444 293.171 mo
735.73 290.724 li
735.73 244.2 li
739.575 230.48 li
763.36 229.289 li
763.36 231.795 li
746.444 293.171 li
f
763.36 231.795 mo
763.36 229.289 li
764.06 229.253 li
763.36 231.795 li
1 .97763 .0169375 0 cmyk
f
739.575 230.48 mo
739.575 230.48 li
764.06 229.253 li
764.06 229.253 li
763.36 229.289 li
739.575 230.48 li
f
735.73 290.724 mo
735.01 290.56 li
735.01 246.769 li
735.73 244.2 li
735.73 290.724 li
739.575 230.48 mo
739.78 229.749 li
764.262 228.522 li
764.06 229.253 li
739.575 230.48 li
1 .953765 .113283 0 cmyk
f
764.434 227.898 mo
765.282 224.819 li
764.08 224.552 li
763.36 224.392 li
742.576 219.772 li
742.614 219.637 li
751.777 221.728 li
751.804 221.734 751.831 221.737 751.858 221.737 cv
752.022 221.737 752.17 221.624 752.208 221.457 cv
752.232 221.35 752.206 221.243 752.146 221.161 cv
760.025 222.913 li
763.36 223.654 li
764.08 223.815 li
765.432 224.115 li
765.432 224.115 li
765.377 224.475 li
764.434 227.898 li
1 .999237 .517693 .0429999 cmyk
f
726.896 303.993 mo
728.874 289.897 li
735.01 291.299 li
735.01 299.566 li
726.896 303.993 li
.776059 .789914 0 0 cmyk
f
735.73 299.174 mo
735.73 291.463 li
745.693 293.738 li
735.73 299.174 li
f
735.01 299.566 mo
735.01 291.299 li
735.73 291.463 li
735.73 299.174 li
735.01 299.566 li
1 .953765 .113283 0 cmyk
f
745.693 293.738 mo
735.73 291.463 li
735.01 291.299 li
728.874 289.897 li
728.974 289.182 li
735.01 290.56 li
735.73 290.724 li
746.444 293.171 li
746.393 293.356 li
745.693 293.738 li
1 .999237 .517693 .0429999 cmyk
f
775.49 160.81 mo
775.846 160.865 li
766.086 224.604 li
766.077 224.646 li
747.047 293.695 li
747.021 293.789 746.958 293.868 746.872 293.915 cv
726.612 304.968 li
726.493 305.033 726.346 305.025 726.235 304.948 cv
726.124 304.871 726.064 304.736 726.083 304.602 cv
734.133 247.24 li
734.143 247.193 li
754.513 174.513 li
754.547 174.432 li
772.877 142.272 li
772.954 142.137 773.108 142.067 773.26 142.097 cv
773.413 142.127 773.528 142.251 773.547 142.405 cv
775.847 160.765 li
775.846 160.865 li
775.49 160.81 li
775.133 160.855 li
772.967 143.568 li
755.195 174.75 li
734.843 247.364 li
726.896 303.993 li
746.393 293.356 li
765.377 224.475 li
775.134 160.756 li
775.49 160.81 li
775.133 160.855 li
775.49 160.81 li
1 /0 /CSD get_res sepcs
1 sep
f
758.05 221.82 mo
758.05 219.47 756.15 217.57 753.8 217.57 cv
751.45 217.57 749.55 219.47 749.55 221.82 cv
749.55 224.17 751.45 226.07 753.8 226.07 cv
756.15 226.07 758.05 224.17 758.05 221.82 cv
cp
.464942 0 1 0 cmyk
ef
6 lw
758.05 221.82 mo
758.05 219.47 756.15 217.57 753.8 217.57 cv
751.45 217.57 749.55 219.47 749.55 221.82 cv
749.55 224.17 751.45 226.07 753.8 226.07 cv
756.15 226.07 758.05 224.17 758.05 221.82 cv
cp
@
623.48 191.709 mo
634.009 194.112 li
634.203 194.156 634.325 194.349 634.28 194.543 cv
634.236 194.737 634.043 194.858 633.849 194.814 cv
623.32 192.411 li
623.126 192.367 623.005 192.174 623.049 191.98 cv
623.093 191.786 623.286 191.665 623.48 191.709 cv
640.327 195.554 mo
650.856 197.957 li
651.05 198.001 651.171 198.194 651.127 198.388 cv
651.083 198.582 650.89 198.703 650.696 198.659 cv
640.167 196.256 li
639.973 196.211 639.852 196.019 639.896 195.825 cv
639.94 195.631 640.133 195.509 640.327 195.554 cv
657.174 199.399 mo
667.703 201.802 li
667.897 201.846 668.018 202.039 667.974 202.233 cv
667.93 202.427 667.737 202.548 667.543 202.504 cv
657.014 200.101 li
656.82 200.056 656.698 199.863 656.743 199.669 cv
656.787 199.476 656.98 199.354 657.174 199.399 cv
674.02 203.243 mo
684.55 205.646 li
684.744 205.691 684.865 205.884 684.821 206.078 cv
684.776 206.271 684.583 206.393 684.39 206.348 cv
673.86 203.945 li
673.666 203.901 673.545 203.708 673.589 203.514 cv
673.634 203.32 673.827 203.199 674.02 203.243 cv
690.867 207.088 mo
701.397 209.491 li
701.591 209.536 701.712 209.728 701.667 209.922 cv
701.623 210.116 701.43 210.237 701.237 210.193 cv
690.707 207.79 li
690.513 207.746 690.392 207.553 690.436 207.359 cv
690.48 207.165 690.673 207.044 690.867 207.088 cv
707.714 210.933 mo
718.243 213.336 li
718.437 213.38 718.558 213.573 718.514 213.767 cv
718.47 213.961 718.277 214.082 718.083 214.038 cv
707.554 211.635 li
707.36 211.591 707.239 211.398 707.283 211.204 cv
707.327 211.01 707.52 210.889 707.714 210.933 cv
724.561 214.778 mo
735.09 217.181 li
735.284 217.225 735.405 217.418 735.361 217.612 cv
735.317 217.806 735.124 217.927 734.93 217.883 cv
724.401 215.48 li
724.207 215.436 724.086 215.243 724.13 215.049 cv
724.174 214.855 724.367 214.734 724.561 214.778 cv
741.408 218.623 mo
751.937 221.026 li
752.131 221.07 752.252 221.263 752.208 221.457 cv
752.164 221.651 751.971 221.772 751.777 221.728 cv
741.248 219.325 li
741.054 219.28 740.933 219.087 740.977 218.893 cv
741.021 218.7 741.214 218.578 741.408 218.623 cv
1 /0 /CSD get_res sepcs
1 sep
f
618.092 124.625 mo
607.18 124.339 li
607.681 119.97 li
609.265 106.136 li
613.153 114.279 li
618.092 124.625 li
.830686 .694423 0 0 cmyk
f
618.092 124.625 mo
618.092 124.625 li
613.153 114.279 li
618.092 124.625 li
.961517 .877256 0 0 cmyk
f
622.09 143.927 mo
605.374 140.111 li
607.098 125.057 li
618.373 125.352 li
622.09 143.927 li
.830686 .694423 0 0 cmyk
f
622.09 143.927 mo
622.09 143.927 li
618.373 125.352 li
607.098 125.057 li
607.18 124.339 li
618.092 124.625 li
618.092 124.625 li
618.326 125.115 li
622.09 143.927 li
.961517 .877256 0 0 cmyk
f
607.681 119.97 mo
607.858 118.423 li
609.265 106.136 li
609.265 106.136 li
607.681 119.97 li
f
605.374 140.111 mo
605.374 140.111 li
607.858 118.423 li
607.681 119.97 li
607.18 124.339 li
607.098 125.057 li
605.374 140.111 li
618.326 125.115 mo
618.092 124.625 li
613.153 114.279 li
609.265 106.136 li
609.265 106.136 li
618.326 125.115 li
1 1 .603418 .324254 cmyk
f
764.015 157.82 mo
642.833 130.148 li
640.413 112.404 li
772.637 142.693 li
764.015 157.82 li
.611902 .503014 0 0 cmyk
f
642.083 129.977 mo
618.92 124.688 li
609.696 105.367 li
639.663 112.232 li
642.083 129.977 li
.680903 .569482 0 0 cmyk
f
642.833 130.148 mo
642.083 129.977 li
639.663 112.232 li
640.413 112.404 li
642.833 130.148 li
1 .989899 .441718 .00140383 cmyk
f
618.92 124.688 mo
618.92 124.688 li
609.696 105.367 li
618.92 124.688 li
f
618.326 125.115 mo
609.265 106.136 li
609.362 105.291 li
609.696 105.367 li
618.92 124.688 li
618.75 124.649 li
618.724 124.643 618.697 124.64 618.671 124.64 cv
618.578 124.64 618.487 124.676 618.419 124.742 cv
618.332 124.827 618.293 124.951 618.317 125.071 cv
618.326 125.115 li
1 1 .603418 .324254 cmyk
f
754.679 174.199 mo
645.439 149.258 li
642.937 130.911 li
763.642 158.474 li
754.679 174.199 li
.611902 .503014 0 0 cmyk
f
644.689 149.087 mo
627.937 145.262 li
622.859 144.103 li
619.132 125.475 li
642.187 130.739 li
644.689 149.087 li
.680903 .569482 0 0 cmyk
f
645.439 149.258 mo
644.689 149.087 li
642.187 130.739 li
642.937 130.911 li
645.439 149.258 li
1 .989899 .441718 .00140383 cmyk
f
763.642 158.474 mo
642.937 130.911 li
642.187 130.739 li
619.132 125.475 li
622.859 144.103 li
622.09 143.927 li
618.326 125.115 li
618.317 125.071 li
618.293 124.951 618.332 124.827 618.419 124.742 cv
618.487 124.676 618.578 124.64 618.671 124.64 cv
618.697 124.64 618.724 124.643 618.75 124.649 cv
618.75 124.649 li
618.92 124.688 li
618.92 124.688 li
642.083 129.977 li
642.833 130.148 li
764.015 157.82 li
763.642 158.474 li
1 1 .603418 .324254 cmyk
f
754.68 174.199 mo
754.679 174.199 li
763.642 158.474 li
764.015 157.82 li
772.637 142.693 li
772.637 142.693 li
754.679 174.2 li
f
609.05 104.85 mo
609.408 104.891 li
605.374 140.111 li
754.679 174.2 li
772.637 142.693 li
608.97 105.201 li
609.05 104.85 li
609.408 104.891 li
609.05 104.85 li
609.13 104.499 li
773.27 142.099 li
773.382 142.125 773.474 142.201 773.52 142.305 cv
773.566 142.41 773.559 142.529 773.503 142.628 cv
755.173 174.788 li
755.094 174.926 754.935 174.996 754.78 174.961 cv
604.9 140.741 li
604.721 140.7 604.601 140.531 604.622 140.349 cv
608.692 104.809 li
608.704 104.707 608.758 104.616 608.842 104.556 cv
608.926 104.497 609.03 104.476 609.13 104.499 cv
609.05 104.85 li
1 /0 /CSD get_res sepcs
1 sep
f
632.228 194.598 mo
630.221 194.546 li
630.283 194.375 630.34 194.201 630.389 194.024 cv
632.196 194.437 li
632.228 194.598 li
616.468 194.185 mo
612.453 194.08 li
605.405 140.856 li
622.245 144.701 li
632.041 193.663 li
630.55 193.323 li
630.622 192.912 630.66 192.49 630.66 192.06 cv
630.66 192.06 li
630.66 192.06 li
630.661 190.064 629.839 188.23 628.529 186.929 cv
627.224 185.624 625.395 184.81 623.405 184.81 cv
623.403 184.81 623.401 184.81 623.4 184.81 cv
623.398 184.81 623.397 184.81 623.396 184.81 cv
621.407 184.81 619.58 185.626 618.278 186.931 cv
616.97 188.232 616.148 190.064 616.15 192.06 cv
616.149 192.797 616.261 193.511 616.468 194.185 cv
.830686 .694423 0 0 cmyk
f
632.228 194.598 mo
630.221 194.546 li
630.221 194.546 li
632.228 194.598 li
632.196 194.437 li
632.196 194.437 li
632.228 194.598 li
616.468 194.185 mo
612.453 194.08 li
616.468 194.185 li
616.468 194.185 li
632.041 193.663 mo
632.041 193.663 li
622.245 144.701 li
622.245 144.701 li
632.041 193.663 li
.961517 .877256 0 0 cmyk
f
636.816 224.619 mo
615.864 219.835 li
613.733 203.745 li
612.549 194.803 li
616.734 194.912 li
617.103 195.772 617.631 196.546 618.278 197.189 cv
619.58 198.494 621.407 199.31 623.396 199.31 cv
623.397 199.31 623.399 199.31 623.4 199.31 cv
623.402 199.31 623.403 199.31 623.405 199.31 cv
625.395 199.31 627.224 198.496 628.529 197.191 cv
629.09 196.635 629.561 195.98 629.916 195.258 cv
632.359 195.322 li
635.673 217.105 li
636.816 224.619 li
.830686 .694423 0 0 cmyk
f
632.359 195.322 mo
629.916 195.258 li
629.916 195.258 li
632.359 195.322 li
616.734 194.912 mo
612.549 194.803 li
612.549 194.803 li
616.734 194.912 li
616.734 194.912 li
.928252 .816037 0 0 cmyk
f
635.673 217.105 mo
632.359 195.322 li
629.916 195.258 li
630.03 195.027 630.132 194.79 630.221 194.546 cv
632.228 194.598 li
632.315 195.031 li
635.673 217.105 li
616.734 194.912 mo
612.549 194.803 li
612.453 194.08 li
616.468 194.185 li
616.544 194.433 616.633 194.676 616.734 194.912 cv
.961517 .877256 0 0 cmyk
f
615.864 219.835 mo
615.864 219.835 li
613.733 203.745 li
615.864 219.835 li
f
615.864 219.835 mo
615.864 219.835 li
605.405 140.856 li
605.405 140.856 li
612.453 194.08 li
612.549 194.803 li
612.549 194.803 li
613.733 203.745 li
615.864 219.835 li
1 1 .603418 .324254 cmyk
f
623.4 193.31 mo
623.05 193.309 622.754 193.175 622.517 192.943 cv
622.285 192.706 622.152 192.414 622.15 192.06 cv
622.152 191.706 622.285 191.413 622.517 191.177 cv
622.754 190.945 623.05 190.811 623.4 190.81 cv
623.758 190.811 624.057 190.947 624.293 191.178 cv
624.507 191.396 624.637 191.661 624.657 191.978 cv
623.48 191.709 li
623.453 191.703 623.426 191.7 623.399 191.7 cv
623.235 191.7 623.087 191.813 623.049 191.98 cv
623.005 192.174 623.126 192.367 623.32 192.411 cv
624.495 192.679 li
624.44 192.773 624.373 192.861 624.293 192.941 cv
624.057 193.173 623.758 193.309 623.4 193.31 cv
.644862 .332494 .841611 0 cmyk
f
623.405 199.31 mo
623.403 199.31 623.402 199.31 623.4 199.31 cv
623.399 199.31 623.397 199.31 623.396 199.31 cv
621.407 199.31 619.58 198.494 618.278 197.189 cv
617.631 196.546 617.103 195.772 616.734 194.912 cv
616.734 194.912 li
616.633 194.676 616.544 194.433 616.468 194.185 cv
616.468 194.185 li
616.261 193.511 616.149 192.797 616.15 192.06 cv
616.148 190.064 616.97 188.232 618.278 186.931 cv
619.58 185.626 621.407 184.81 623.396 184.81 cv
623.397 184.81 623.398 184.81 623.4 184.81 cv
623.401 184.81 623.403 184.81 623.405 184.81 cv
625.395 184.81 627.224 185.624 628.529 186.929 cv
629.839 188.23 630.661 190.064 630.66 192.06 cv
627.66 192.06 li
625.017 192.06 li
624.657 191.978 li
624.637 191.661 624.507 191.396 624.293 191.178 cv
624.057 190.947 623.758 190.811 623.4 190.81 cv
623.05 190.811 622.754 190.945 622.517 191.177 cv
622.285 191.413 622.152 191.706 622.15 192.06 cv
622.152 192.414 622.285 192.706 622.517 192.943 cv
622.754 193.175 623.05 193.309 623.4 193.31 cv
623.758 193.309 624.057 193.173 624.293 192.941 cv
624.373 192.861 624.44 192.773 624.495 192.679 cv
630.389 194.024 li
630.34 194.201 630.283 194.375 630.221 194.546 cv
630.221 194.546 li
630.132 194.79 630.03 195.027 629.916 195.258 cv
629.916 195.258 li
629.561 195.98 629.09 196.635 628.529 197.191 cv
627.224 198.496 625.395 199.31 623.405 199.31 cv
630.55 193.323 mo
625.017 192.06 li
627.66 192.06 li
630.66 192.06 li
630.66 192.06 li
630.66 192.49 630.622 192.912 630.55 193.323 cv
630.66 192.06 mo
630.66 192.06 li
630.66 192.06 li
f
729.193 215.835 mo
724.561 214.778 li
724.534 214.772 724.507 214.769 724.48 214.769 cv
724.354 214.769 724.237 214.836 724.173 214.943 cv
718.523 213.687 li
718.523 213.523 718.41 213.374 718.243 213.336 cv
707.714 210.933 li
707.687 210.927 707.66 210.924 707.634 210.924 cv
707.474 210.924 707.33 211.03 707.287 211.189 cv
701.663 209.939 li
701.665 209.933 701.666 209.928 701.667 209.922 cv
701.712 209.728 701.591 209.536 701.397 209.491 cv
690.867 207.088 li
690.84 207.082 690.813 207.079 690.787 207.079 cv
690.623 207.079 690.474 207.192 690.436 207.359 cv
690.43 207.387 690.427 207.414 690.427 207.441 cv
684.777 206.185 li
684.797 206.153 684.812 206.117 684.821 206.078 cv
684.865 205.884 684.744 205.691 684.55 205.646 cv
674.02 203.243 li
673.993 203.237 673.966 203.234 673.94 203.234 cv
673.776 203.234 673.627 203.347 673.589 203.514 cv
673.575 203.578 673.578 203.641 673.596 203.699 cv
667.859 202.424 li
667.915 202.376 667.956 202.31 667.974 202.233 cv
668.018 202.039 667.897 201.846 667.703 201.802 cv
657.174 199.399 li
657.147 199.392 657.12 199.39 657.093 199.39 cv
656.929 199.39 656.781 199.503 656.743 199.669 cv
656.718 199.777 656.745 199.885 656.807 199.967 cv
652.214 198.946 li
645.543 150.02 li
754.411 174.877 li
743.26 214.663 li
729.193 215.835 li
.611902 .503014 0 0 cmyk
f
742.106 218.782 mo
741.408 218.623 li
741.381 218.617 741.354 218.614 741.327 218.614 cv
741.238 218.614 741.154 218.647 741.09 218.704 cv
735.355 217.429 li
735.319 217.309 735.221 217.211 735.09 217.181 cv
731.512 216.364 li
743.053 215.403 li
742.106 218.782 li
.67068 .836393 0 0 cmyk
f
731.512 216.364 mo
729.193 215.835 li
743.26 214.663 li
743.053 215.403 li
731.512 216.364 li
1 .989899 .441718 .00140383 cmyk
f
651.465 198.779 mo
650.886 198.651 li
651.003 198.613 651.098 198.516 651.127 198.388 cv
651.171 198.194 651.05 198.001 650.856 197.957 cv
640.327 195.554 li
640.3 195.548 640.273 195.545 640.246 195.545 cv
640.082 195.545 639.934 195.658 639.896 195.825 cv
639.852 196.019 639.973 196.211 640.167 196.256 cv
642.182 196.716 li
632.977 194.669 li
632.966 194.612 li
633.849 194.814 li
633.876 194.82 633.903 194.823 633.93 194.823 cv
634.094 194.823 634.242 194.71 634.28 194.543 cv
634.325 194.349 634.203 194.156 634.009 194.112 cv
632.811 193.839 li
623.014 144.877 li
644.792 149.849 li
651.465 198.779 li
.680903 .569482 0 0 cmyk
f
652.214 198.946 mo
651.465 198.779 li
644.792 149.849 li
645.543 150.02 li
652.214 198.946 li
1 .989899 .441718 .00140383 cmyk
f
741.09 218.704 mo
735.355 217.429 li
735.355 217.429 735.355 217.429 735.355 217.429 cv
741.09 218.704 li
741.09 218.704 741.09 218.704 741.09 218.704 cv
724.173 214.943 mo
718.523 213.687 li
718.523 213.687 718.523 213.687 718.523 213.687 cv
724.173 214.943 li
724.173 214.943 724.173 214.943 724.173 214.943 cv
707.287 211.189 mo
701.663 209.939 li
701.663 209.939 701.663 209.939 701.663 209.939 cv
707.287 211.189 li
707.287 211.189 707.287 211.189 707.287 211.189 cv
690.427 207.441 mo
684.777 206.185 li
684.777 206.185 684.777 206.185 684.777 206.185 cv
690.427 207.441 li
690.427 207.441 690.427 207.441 690.427 207.441 cv
673.596 203.699 mo
667.859 202.424 li
667.859 202.424 667.859 202.424 667.859 202.424 cv
673.596 203.699 li
673.596 203.699 673.596 203.699 673.596 203.699 cv
656.807 199.967 mo
650.886 198.651 li
650.886 198.651 650.886 198.651 650.886 198.651 cv
651.465 198.779 li
652.214 198.946 li
656.807 199.967 li
656.807 199.967 656.807 199.967 656.807 199.967 cv
642.205 196.721 mo
632.748 194.619 li
632.722 194.613 632.696 194.61 632.669 194.61 cv
632.579 194.61 632.492 194.644 632.424 194.707 cv
632.337 194.788 632.296 194.906 632.314 195.024 cv
632.315 195.031 li
632.228 194.598 li
632.196 194.437 li
632.966 194.612 li
632.977 194.669 li
642.182 196.716 li
642.205 196.721 li
632.811 193.839 mo
632.041 193.663 li
622.245 144.701 li
623.014 144.877 li
632.811 193.839 li
1 1 .603418 .324254 cmyk
f
695.33 237.979 mo
656.323 229.073 li
652.318 199.707 li
726.047 216.097 li
712.67 217.211 li
712.669 217.211 712.668 217.211 712.667 217.212 cv
712.666 217.212 712.664 217.212 712.663 217.212 cv
712.662 217.212 712.66 217.212 712.659 217.212 cv
712.657 217.213 712.656 217.213 712.654 217.213 cv
712.653 217.213 712.651 217.213 712.65 217.213 cv
712.649 217.214 712.647 217.214 712.646 217.214 cv
712.644 217.214 712.643 217.215 712.642 217.215 cv
712.64 217.215 712.638 217.215 712.637 217.216 cv
712.636 217.216 712.634 217.216 712.633 217.216 cv
712.631 217.217 712.63 217.217 712.628 217.217 cv
712.627 217.217 712.626 217.218 712.625 217.218 cv
712.623 217.218 712.621 217.219 712.62 217.219 cv
712.619 217.219 712.618 217.219 712.617 217.22 cv
712.615 217.22 712.613 217.221 712.611 217.221 cv
712.61 217.221 712.61 217.221 712.61 217.221 cv
712.593 217.226 712.577 217.231 712.561 217.238 cv
695.552 224.328 li
695.549 224.329 695.547 224.33 695.545 224.331 cv
695.544 224.331 695.544 224.331 695.543 224.331 cv
695.541 224.332 695.54 224.333 695.538 224.334 cv
695.538 224.334 695.537 224.334 695.536 224.334 cv
695.535 224.335 695.533 224.336 695.531 224.337 cv
695.531 224.337 695.53 224.337 695.53 224.338 cv
695.528 224.338 695.526 224.339 695.525 224.34 cv
695.524 224.34 695.524 224.341 695.524 224.341 cv
695.522 224.342 695.52 224.343 695.518 224.344 cv
695.518 224.344 695.517 224.344 695.517 224.344 cv
695.409 224.403 695.339 224.513 695.331 224.635 cv
695.331 224.636 695.331 224.636 695.331 224.636 cv
695.331 224.638 695.33 224.641 695.33 224.643 cv
695.33 224.644 695.33 224.645 695.33 224.646 cv
695.33 224.646 695.33 224.647 695.33 224.648 cv
695.33 224.649 695.33 224.651 695.33 224.652 cv
695.33 224.653 695.33 224.653 695.33 224.654 cv
695.33 224.656 695.33 224.658 695.33 224.66 cv
695.33 224.66 li
695.33 237.979 li
.611902 .503014 0 0 cmyk
f
712.61 217.221 mo
712.61 217.221 712.61 217.221 712.611 217.221 cv
712.61 217.221 712.61 217.221 712.61 217.221 cv
712.617 217.22 mo
712.618 217.219 712.619 217.219 712.62 217.219 cv
712.619 217.219 712.618 217.219 712.617 217.22 cv
712.625 217.218 mo
712.626 217.218 712.627 217.217 712.628 217.217 cv
712.627 217.217 712.626 217.218 712.625 217.218 cv
712.633 217.216 mo
712.634 217.216 712.636 217.216 712.637 217.216 cv
712.636 217.216 712.634 217.216 712.633 217.216 cv
712.642 217.215 mo
712.643 217.215 712.644 217.214 712.646 217.214 cv
712.644 217.214 712.643 217.215 712.642 217.215 cv
712.65 217.213 mo
712.651 217.213 712.653 217.213 712.654 217.213 cv
712.653 217.213 712.651 217.213 712.65 217.213 cv
712.659 217.212 mo
712.66 217.212 712.662 217.212 712.663 217.212 cv
712.662 217.212 712.66 217.212 712.659 217.212 cv
712.667 217.212 mo
712.668 217.211 712.669 217.211 712.67 217.211 cv
726.047 216.097 li
712.67 217.211 li
712.67 217.211 li
712.669 217.211 712.668 217.211 712.667 217.212 cv
1 .989899 .441718 .00140383 cmyk
f
695.33 224.654 mo
695.33 224.653 695.33 224.653 695.33 224.652 cv
695.33 224.653 695.33 224.653 695.33 224.654 cv
695.33 224.648 mo
695.33 224.647 695.33 224.646 695.33 224.646 cv
695.33 224.646 695.33 224.647 695.33 224.648 cv
695.33 224.643 mo
695.33 224.641 695.331 224.638 695.331 224.636 cv
695.331 224.638 695.33 224.641 695.33 224.643 cv
695.331 224.635 mo
695.339 224.513 695.409 224.403 695.517 224.344 cv
695.426 224.394 695.362 224.48 695.339 224.578 cv
695.339 224.578 695.339 224.578 695.339 224.579 cv
695.339 224.58 695.339 224.581 695.338 224.582 cv
695.338 224.583 695.338 224.584 695.338 224.585 cv
695.338 224.586 695.337 224.587 695.337 224.588 cv
695.337 224.59 695.336 224.592 695.336 224.594 cv
695.336 224.594 695.336 224.595 695.336 224.595 cv
695.333 224.608 695.332 224.622 695.331 224.635 cv
695.518 224.344 mo
695.52 224.343 695.522 224.342 695.524 224.341 cv
695.522 224.342 695.52 224.343 695.518 224.344 cv
695.525 224.34 mo
695.526 224.339 695.528 224.338 695.53 224.338 cv
695.528 224.338 695.526 224.339 695.525 224.34 cv
695.531 224.337 mo
695.533 224.336 695.535 224.335 695.536 224.334 cv
695.535 224.335 695.533 224.336 695.531 224.337 cv
695.538 224.334 mo
695.54 224.333 695.541 224.332 695.543 224.331 cv
695.541 224.332 695.54 224.333 695.538 224.334 cv
695.545 224.331 mo
695.547 224.33 695.549 224.329 695.552 224.328 cv
712.561 217.238 li
712.577 217.231 712.593 217.226 712.61 217.221 cv
712.61 217.221 712.61 217.221 712.611 217.221 cv
712.613 217.221 712.615 217.22 712.617 217.22 cv
712.618 217.219 712.619 217.219 712.62 217.219 cv
712.621 217.219 712.623 217.218 712.625 217.218 cv
712.626 217.218 712.627 217.217 712.628 217.217 cv
712.63 217.217 712.631 217.217 712.633 217.216 cv
712.634 217.216 712.636 217.216 712.637 217.216 cv
712.638 217.215 712.64 217.215 712.642 217.215 cv
712.643 217.215 712.644 217.214 712.646 217.214 cv
712.647 217.214 712.649 217.214 712.65 217.213 cv
712.651 217.213 712.653 217.213 712.654 217.213 cv
712.656 217.213 712.657 217.213 712.659 217.212 cv
712.66 217.212 712.662 217.212 712.663 217.212 cv
712.664 217.212 712.666 217.212 712.667 217.212 cv
712.668 217.211 712.669 217.211 712.67 217.211 cv
712.561 217.238 li
695.552 224.328 li
695.549 224.329 695.547 224.33 695.545 224.331 cv
f
735.386 229.969 mo
714.216 226.944 li
713.06 226.778 li
713.06 217.901 li
728.411 216.623 li
741.872 219.615 li
741.609 220.556 li
739.022 229.787 li
735.386 229.969 li
.67068 .836393 0 0 cmyk
f
712.34 226.676 mo
697.037 224.489 li
712.34 218.11 li
712.34 226.676 li
f
713.06 226.778 mo
712.34 226.676 li
712.34 218.11 li
712.786 217.924 li
713.06 217.901 li
713.06 226.778 li
.930175 1 .287449 .000854505 cmyk
f
735.386 229.969 mo
714.216 226.944 li
735.386 229.969 li
739.022 229.787 li
739.022 229.787 li
735.386 229.969 li
695.336 224.595 mo
695.336 224.595 695.336 224.594 695.336 224.594 cv
695.336 224.594 695.336 224.595 695.336 224.595 cv
695.337 224.588 mo
695.337 224.587 695.338 224.586 695.338 224.585 cv
695.338 224.586 695.337 224.587 695.337 224.588 cv
695.338 224.582 mo
695.339 224.581 695.339 224.58 695.339 224.579 cv
695.339 224.58 695.339 224.581 695.338 224.582 cv
695.339 224.578 mo
695.362 224.48 695.426 224.394 695.517 224.344 cv
695.517 224.344 695.518 224.344 695.518 224.344 cv
695.52 224.343 695.522 224.342 695.524 224.341 cv
695.524 224.341 695.524 224.34 695.525 224.34 cv
695.526 224.339 695.528 224.338 695.53 224.338 cv
695.53 224.337 695.531 224.337 695.531 224.337 cv
695.533 224.336 695.535 224.335 695.536 224.334 cv
695.537 224.334 695.538 224.334 695.538 224.334 cv
695.54 224.333 695.541 224.332 695.543 224.331 cv
695.544 224.331 695.544 224.331 695.545 224.331 cv
695.547 224.33 695.549 224.329 695.552 224.328 cv
712.561 217.238 li
712.67 217.211 li
712.67 217.211 li
726.047 216.097 li
728.411 216.623 li
713.06 217.901 li
712.786 217.924 li
712.34 218.11 li
697.036 224.489 li
695.741 224.304 li
695.724 224.301 695.707 224.3 695.69 224.3 cv
695.604 224.3 695.52 224.331 695.454 224.388 cv
695.396 224.438 695.357 224.505 695.339 224.578 cv
1 .989899 .441718 .00140383 cmyk
f
734.236 246.863 mo
713.06 242.028 li
713.06 227.506 li
735.01 230.642 li
735.01 244.1 li
734.236 246.863 li
.680385 .784482 0 0 cmyk
f
712.34 241.863 mo
696.05 238.144 li
696.05 225.075 li
712.34 227.403 li
712.34 241.863 li
f
713.06 242.028 mo
712.34 241.863 li
712.34 227.403 li
713.06 227.506 li
713.06 242.028 li
.981659 1 .339574 0 cmyk
f
735.01 244.1 mo
735.01 230.642 li
713.06 227.506 li
712.34 227.403 li
696.05 225.075 li
696.05 238.144 li
695.33 237.979 li
695.33 224.66 li
695.33 224.66 li
695.33 224.658 695.33 224.656 695.33 224.654 cv
695.33 224.653 695.33 224.653 695.33 224.652 cv
695.33 224.651 695.33 224.649 695.33 224.648 cv
695.33 224.647 695.33 224.646 695.33 224.646 cv
695.33 224.645 695.33 224.644 695.33 224.643 cv
695.33 224.641 695.331 224.638 695.331 224.636 cv
695.331 224.636 695.331 224.636 695.331 224.635 cv
695.332 224.622 695.333 224.608 695.336 224.595 cv
695.336 224.595 695.336 224.594 695.336 224.594 cv
695.336 224.592 695.337 224.59 695.337 224.588 cv
695.337 224.587 695.338 224.586 695.338 224.585 cv
695.338 224.584 695.338 224.583 695.338 224.582 cv
695.339 224.581 695.339 224.58 695.339 224.579 cv
695.339 224.578 695.339 224.578 695.339 224.578 cv
695.357 224.505 695.396 224.438 695.454 224.388 cv
695.52 224.331 695.604 224.3 695.69 224.3 cv
695.707 224.3 695.724 224.301 695.741 224.304 cv
695.741 224.304 li
697.037 224.489 li
712.34 226.676 li
713.06 226.778 li
714.216 226.944 li
735.386 229.969 li
735.352 229.971 li
735.37 230.33 li
735.352 229.971 li
735.16 229.98 735.01 230.138 735.01 230.33 cv
735.01 244.1 li
696.05 224.66 mo
696.05 224.66 li
695.69 224.66 mo
695.69 224.66 li
696.05 224.66 li
695.69 224.66 li
1 .989899 .441718 .00140383 cmyk
f
735.73 241.532 mo
735.73 230.672 li
738.817 230.518 li
735.73 241.532 li
.680385 .784482 0 0 cmyk
f
735.01 244.1 mo
735.01 230.33 li
735.01 230.138 735.16 229.98 735.352 229.971 cv
735.37 230.33 li
735.73 230.33 li
735.37 230.33 li
735.352 229.971 li
735.386 229.969 li
739.022 229.787 li
738.817 230.518 li
735.73 230.672 li
735.73 241.532 li
735.01 244.1 li
735.73 230.33 mo
735.73 230.33 li
1 .989899 .441718 .00140383 cmyk
f
655.572 228.902 mo
637.571 224.791 li
633.105 195.435 li
651.569 199.54 li
655.572 228.902 li
.680903 .569482 0 0 cmyk
f
656.323 229.073 mo
655.572 228.902 li
651.569 199.54 li
652.318 199.707 li
656.323 229.073 li
1 .989899 .441718 .00140383 cmyk
f
637.571 224.791 mo
636.816 224.619 li
635.673 217.105 li
632.315 195.031 li
632.314 195.024 li
632.296 194.906 632.337 194.788 632.424 194.707 cv
632.492 194.644 632.579 194.61 632.669 194.61 cv
632.696 194.61 632.722 194.613 632.748 194.619 cv
632.748 194.619 li
642.205 196.721 li
650.696 198.659 li
650.723 198.665 650.75 198.668 650.777 198.668 cv
650.814 198.668 650.851 198.662 650.886 198.651 cv
656.807 199.967 li
656.856 200.032 656.928 200.081 657.014 200.101 cv
667.543 202.504 li
667.57 202.51 667.597 202.513 667.623 202.513 cv
667.711 202.513 667.795 202.48 667.859 202.424 cv
673.596 203.699 li
673.632 203.819 673.73 203.916 673.86 203.945 cv
684.39 206.348 li
684.417 206.354 684.444 206.357 684.47 206.357 cv
684.596 206.357 684.712 206.291 684.777 206.185 cv
690.427 207.441 li
690.428 207.605 690.541 207.752 690.707 207.79 cv
701.237 210.193 li
701.263 210.199 701.291 210.202 701.317 210.202 cv
701.476 210.202 701.62 210.097 701.663 209.939 cv
707.287 211.189 li
707.285 211.194 707.284 211.199 707.283 211.204 cv
707.239 211.398 707.36 211.591 707.554 211.635 cv
718.083 214.038 li
718.11 214.044 718.137 214.047 718.164 214.047 cv
718.328 214.047 718.476 213.934 718.514 213.767 cv
718.52 213.74 718.523 213.713 718.523 213.687 cv
724.173 214.943 li
724.153 214.975 724.139 215.01 724.13 215.049 cv
724.086 215.243 724.207 215.436 724.401 215.48 cv
734.93 217.883 li
734.957 217.889 734.984 217.892 735.011 217.892 cv
735.175 217.892 735.323 217.779 735.361 217.612 cv
735.376 217.549 735.372 217.486 735.355 217.429 cv
741.09 218.704 li
741.035 218.752 740.994 218.817 740.977 218.893 cv
740.933 219.087 741.054 219.28 741.248 219.325 cv
741.911 219.476 li
741.872 219.615 li
728.411 216.623 li
726.047 216.097 li
652.318 199.707 li
651.569 199.54 li
633.105 195.435 li
637.571 224.791 li
1 1 .603418 .324254 cmyk
f
734.236 246.863 mo
734.236 246.863 li
735.01 244.1 li
735.73 241.532 li
738.817 230.518 li
739.022 229.787 li
739.022 229.787 li
741.609 220.556 li
734.236 246.863 li
f
741.911 219.476 mo
741.248 219.325 li
741.054 219.28 740.933 219.087 740.977 218.893 cv
740.994 218.817 741.035 218.752 741.09 218.704 cv
741.09 218.704 741.09 218.704 741.09 218.704 cv
741.154 218.647 741.238 218.614 741.327 218.614 cv
741.354 218.614 741.381 218.617 741.408 218.623 cv
742.106 218.782 li
741.911 219.476 li
735.011 217.892 mo
734.984 217.892 734.957 217.889 734.93 217.883 cv
724.401 215.48 li
724.207 215.436 724.086 215.243 724.13 215.049 cv
724.139 215.01 724.153 214.975 724.173 214.943 cv
724.173 214.943 724.173 214.943 724.173 214.943 cv
724.237 214.836 724.354 214.769 724.48 214.769 cv
724.507 214.769 724.534 214.772 724.561 214.778 cv
729.193 215.835 li
731.512 216.364 li
735.09 217.181 li
735.221 217.211 735.319 217.309 735.355 217.429 cv
735.355 217.429 735.355 217.429 735.355 217.429 cv
735.372 217.486 735.376 217.549 735.361 217.612 cv
735.323 217.779 735.175 217.892 735.011 217.892 cv
718.164 214.047 mo
718.137 214.047 718.11 214.044 718.083 214.038 cv
707.554 211.635 li
707.36 211.591 707.239 211.398 707.283 211.204 cv
707.284 211.199 707.285 211.194 707.287 211.189 cv
707.287 211.189 707.287 211.189 707.287 211.189 cv
707.33 211.03 707.474 210.924 707.634 210.924 cv
707.66 210.924 707.687 210.927 707.714 210.933 cv
718.243 213.336 li
718.41 213.374 718.523 213.523 718.523 213.687 cv
718.523 213.687 718.523 213.687 718.523 213.687 cv
718.523 213.713 718.52 213.74 718.514 213.767 cv
718.476 213.934 718.328 214.047 718.164 214.047 cv
701.317 210.202 mo
701.291 210.202 701.263 210.199 701.237 210.193 cv
690.707 207.79 li
690.541 207.752 690.428 207.605 690.427 207.441 cv
690.427 207.441 690.427 207.441 690.427 207.441 cv
690.427 207.414 690.43 207.387 690.436 207.359 cv
690.474 207.192 690.623 207.079 690.787 207.079 cv
690.813 207.079 690.84 207.082 690.867 207.088 cv
701.397 209.491 li
701.591 209.536 701.712 209.728 701.667 209.922 cv
701.666 209.928 701.665 209.933 701.663 209.939 cv
701.663 209.939 701.663 209.939 701.663 209.939 cv
701.62 210.097 701.476 210.202 701.317 210.202 cv
684.47 206.357 mo
684.444 206.357 684.417 206.354 684.39 206.348 cv
673.86 203.945 li
673.73 203.916 673.632 203.819 673.596 203.699 cv
673.596 203.699 673.596 203.699 673.596 203.699 cv
673.578 203.641 673.575 203.578 673.589 203.514 cv
673.627 203.347 673.776 203.234 673.94 203.234 cv
673.966 203.234 673.993 203.237 674.02 203.243 cv
684.55 205.646 li
684.744 205.691 684.865 205.884 684.821 206.078 cv
684.812 206.117 684.797 206.153 684.777 206.185 cv
684.777 206.185 684.777 206.185 684.777 206.185 cv
684.712 206.291 684.596 206.357 684.47 206.357 cv
667.623 202.513 mo
667.597 202.513 667.57 202.51 667.543 202.504 cv
657.014 200.101 li
656.928 200.081 656.856 200.032 656.807 199.967 cv
656.807 199.967 656.807 199.967 656.807 199.967 cv
656.745 199.885 656.718 199.777 656.743 199.669 cv
656.781 199.503 656.929 199.39 657.093 199.39 cv
657.12 199.39 657.147 199.392 657.174 199.399 cv
667.703 201.802 li
667.897 201.846 668.018 202.039 667.974 202.233 cv
667.956 202.31 667.915 202.376 667.859 202.424 cv
667.859 202.424 667.859 202.424 667.859 202.424 cv
667.795 202.48 667.711 202.513 667.623 202.513 cv
650.777 198.668 mo
650.75 198.668 650.723 198.665 650.696 198.659 cv
642.205 196.721 li
642.182 196.716 li
640.167 196.256 li
639.973 196.211 639.852 196.019 639.896 195.825 cv
639.934 195.658 640.082 195.545 640.246 195.545 cv
640.273 195.545 640.3 195.548 640.327 195.554 cv
650.856 197.957 li
651.05 198.001 651.171 198.194 651.127 198.388 cv
651.098 198.516 651.003 198.613 650.886 198.651 cv
650.886 198.651 650.886 198.651 650.886 198.651 cv
650.851 198.662 650.814 198.668 650.777 198.668 cv
633.93 194.823 mo
633.903 194.823 633.876 194.82 633.849 194.814 cv
632.966 194.612 li
632.196 194.437 li
632.196 194.437 li
630.389 194.024 li
624.495 192.679 li
623.32 192.411 li
623.126 192.367 623.005 192.174 623.049 191.98 cv
623.087 191.813 623.235 191.7 623.399 191.7 cv
623.426 191.7 623.453 191.703 623.48 191.709 cv
624.657 191.978 li
625.017 192.06 li
630.55 193.323 li
632.041 193.663 li
632.041 193.663 li
632.811 193.839 li
634.009 194.112 li
634.203 194.156 634.325 194.349 634.28 194.543 cv
634.242 194.71 634.094 194.823 633.93 194.823 cv
f
604.98 140.39 mo
605.337 140.343 li
615.864 219.835 li
734.236 246.863 li
754.411 174.877 li
604.9 140.741 li
604.98 140.39 li
605.337 140.343 li
604.98 140.39 li
605.06 140.039 li
754.94 174.259 li
755.036 174.281 755.119 174.341 755.169 174.426 cv
755.22 174.511 755.233 174.612 755.206 174.707 cv
734.836 247.387 li
734.785 247.572 734.597 247.684 734.41 247.641 cv
615.46 220.481 li
615.313 220.448 615.203 220.326 615.183 220.177 cv
604.623 140.437 li
604.607 140.32 604.65 140.203 604.737 140.124 cv
604.825 140.045 604.945 140.013 605.06 140.039 cv
604.98 140.39 li
1 /0 /CSD get_res sepcs
1 sep
f
643.689 269.799 mo
626.016 269.336 li
616.005 220.606 li
636.932 225.384 li
643.689 269.799 li
.830686 .694423 0 0 cmyk
f
628.537 281.608 mo
626.165 270.06 li
643.08 270.503 li
636.29 275.688 li
628.537 281.608 li
f
628.537 281.608 mo
628.537 281.608 li
636.29 275.688 li
628.537 281.608 li
643.08 270.503 mo
626.165 270.06 li
626.016 269.336 li
643.689 269.799 li
643.722 270.013 li
643.08 270.503 li
.961517 .877256 0 0 cmyk
f
628.22 281.85 mo
615.619 220.518 li
616.005 220.606 li
626.016 269.336 li
626.165 270.06 li
628.537 281.608 li
628.22 281.85 li
1 1 .603418 .324254 cmyk
f
695.33 281.498 mo
662.448 273.988 li
656.427 229.835 li
695.33 238.718 li
695.33 281.498 li
.611902 .503014 0 0 cmyk
f
728.27 289.021 mo
713.06 285.547 li
713.06 242.766 li
734.087 247.567 li
728.27 289.021 li
.680385 .784482 0 0 cmyk
f
712.34 285.383 mo
696.05 281.662 li
696.05 238.882 li
712.34 242.602 li
712.34 285.383 li
f
713.06 285.547 mo
712.34 285.383 li
712.34 242.602 li
713.06 242.766 li
713.06 285.547 li
.981659 1 .339574 0 cmyk
f
696.05 281.662 mo
695.33 281.498 li
695.33 238.718 li
696.05 238.882 li
696.05 281.662 li
1 .989899 .441718 .00140383 cmyk
f
661.697 273.817 mo
644.429 269.873 li
637.687 225.556 li
655.676 229.664 li
661.697 273.817 li
.680903 .569482 0 0 cmyk
f
662.448 273.988 mo
661.697 273.817 li
655.676 229.664 li
656.427 229.835 li
662.448 273.988 li
1 .989899 .441718 .00140383 cmyk
f
643.722 270.013 mo
643.689 269.799 li
636.932 225.384 li
637.687 225.556 li
644.429 269.874 li
644.19 269.819 li
644.164 269.813 644.137 269.81 644.11 269.81 cv
644.032 269.81 643.955 269.835 643.891 269.884 cv
643.722 270.013 li
1 1 .603418 .324254 cmyk
f
695.33 297.179 mo
664.655 290.174 li
662.552 274.751 li
695.33 282.237 li
695.33 297.179 li
.611902 .503014 0 0 cmyk
f
726.138 304.214 mo
713.06 301.227 li
713.06 286.286 li
728.17 289.736 li
726.138 304.214 li
.680385 .784482 0 0 cmyk
f
712.34 301.063 mo
696.05 297.343 li
696.05 282.401 li
712.34 286.121 li
712.34 301.063 li
f
713.06 301.227 mo
712.34 301.063 li
712.34 286.121 li
713.06 286.286 li
713.06 301.227 li
.981659 1 .339574 0 cmyk
f
696.05 297.343 mo
695.33 297.179 li
695.33 282.237 li
696.05 282.401 li
696.05 297.343 li
1 .989899 .441718 .00140383 cmyk
f
663.904 290.003 mo
629.129 282.062 li
644.194 270.558 li
661.801 274.579 li
663.904 290.003 li
.680903 .569482 0 0 cmyk
f
664.655 290.174 mo
663.904 290.003 li
661.801 274.579 li
662.552 274.751 li
664.655 290.174 li
1 .989899 .441718 .00140383 cmyk
f
629.129 282.062 mo
629.129 282.062 li
644.194 270.558 li
629.129 282.062 li
f
726.088 304.572 mo
628.3 282.242 li
628.22 281.85 li
628.537 281.608 li
636.29 275.688 li
643.08 270.503 li
643.722 270.013 li
643.891 269.884 li
643.955 269.835 644.032 269.81 644.11 269.81 cv
644.137 269.81 644.164 269.813 644.19 269.819 cv
644.19 269.819 li
644.429 269.873 li
661.697 273.817 li
662.448 273.988 li
695.33 281.498 li
696.05 281.662 li
712.34 285.383 li
713.06 285.547 li
728.27 289.021 li
728.17 289.736 li
713.06 286.286 li
712.34 286.121 li
696.05 282.401 li
695.33 282.237 li
662.552 274.751 li
661.801 274.579 li
644.194 270.558 li
629.129 282.062 li
663.904 290.003 li
664.655 290.174 li
695.33 297.179 li
696.05 297.343 li
712.34 301.063 li
713.06 301.227 li
726.138 304.214 li
726.088 304.572 li
644.328 270.456 mo
644.328 270.456 li
644.11 270.17 mo
644.11 270.17 li
644.328 270.456 li
644.11 270.17 li
1 1 .603418 .324254 cmyk
f
726.44 304.652 mo
726.088 304.572 li
726.138 304.214 li
728.17 289.736 li
728.27 289.021 li
734.087 247.567 li
734.41 247.641 li
734.42 247.643 734.43 247.645 734.44 247.646 cv
726.44 304.652 li
f
734.44 247.646 mo
734.43 247.645 734.42 247.643 734.41 247.641 cv
734.087 247.567 li
713.06 242.766 li
712.34 242.602 li
696.05 238.882 li
695.33 238.718 li
656.427 229.835 li
655.676 229.664 li
637.687 225.556 li
636.932 225.384 li
616.005 220.606 li
615.619 220.518 li
615.54 220.13 li
734.49 247.29 li
734.44 247.646 li
f
.72 lw
615.54 220.13 mo
628.3 282.242 li
726.44 304.652 li
734.49 247.29 li
615.54 220.13 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
